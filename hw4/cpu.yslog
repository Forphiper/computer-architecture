
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `cpu.ys' --

1. Executing Verilog-2005 frontend: ./codes/cpu.v
Parsing Verilog input from `./codes/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Note: Assuming pure combinatorial block at ./codes/cpu.v:115 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:126 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:147 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:160 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:172 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:207 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:215 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:245 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ./codes/cpu.v:413 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./codes/alu.v
Parsing Verilog input from `./codes/alu.v' to AST representation.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./codes/alu_control.v
Parsing Verilog input from `./codes/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./codes/control.v
Parsing Verilog input from `./codes/control.v' to AST representation.
Generating RTLIL representation for module `\Control'.
Note: Assuming pure combinatorial block at ./codes/control.v:12 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./codes/imm_gen.v
Parsing Verilog input from `./codes/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\ImmGen'.
Note: Assuming pure combinatorial block at ./codes/imm_gen.v:11 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ./codes/mux.v
Parsing Verilog input from `./codes/mux.v' to AST representation.
Generating RTLIL representation for module `\Mux'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ./codes/register_file.v
Parsing Verilog input from `./codes/register_file.v' to AST representation.
Generating RTLIL representation for module `\RegisterFile'.
Warning: Replacing memory \registers with list of registers. See ./codes/register_file.v:36
Warning: Replacing memory \registers_w with list of registers. See ./codes/register_file.v:29, ./codes/register_file.v:21
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ./codes/forwarding_unit.v
Parsing Verilog input from `./codes/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ./codes/hazard_detection_unit.v
Parsing Verilog input from `./codes/hazard_detection_unit.v' to AST representation.
Generating RTLIL representation for module `\HazardDetectionUnit'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: ./codes/adder.v
Parsing Verilog input from `./codes/adder.v' to AST representation.
Generating RTLIL representation for module `\Adder'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: ./codes/shift_left_one.v
Parsing Verilog input from `./codes/shift_left_one.v' to AST representation.
Generating RTLIL representation for module `\ShiftLeftOne'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: ./codes/pc_source.v
Parsing Verilog input from `./codes/pc_source.v' to AST representation.
Generating RTLIL representation for module `\PCSrc'.
Successfully finished Verilog frontend.

13. Executing SYNTH pass.

13.1. Executing HIERARCHY pass (managing design hierarchy).

13.1.1. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \Mux
Used module:     \ForwardingUnit
Used module:     \ALU
Used module:     \ALUControl
Used module:     \HazardDetectionUnit
Used module:     \Adder
Used module:     \ShiftLeftOne
Used module:     \PCSrc
Used module:     \ImmGen
Used module:     \Control
Used module:     \RegisterFile

13.1.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Parameter \DATA_W = 64
Generating RTLIL representation for module `$paramod\Mux\DATA_W=64'.

13.1.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Parameter \DATA_W = 64
Generating RTLIL representation for module `$paramod\ALU\DATA_W=64'.

13.1.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Parameter \DATA_W = 64
Found cached RTLIL representation for module `$paramod\Mux\DATA_W=64'.

13.1.5. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Parameter \DATA_W = 64
Found cached RTLIL representation for module `$paramod\Mux\DATA_W=64'.

13.1.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Parameter \DATA_W = 64
Found cached RTLIL representation for module `$paramod\Mux\DATA_W=64'.

13.1.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Adder'.
Parameter \DATA_W = 64
Generating RTLIL representation for module `$paramod\Adder\DATA_W=64'.

13.1.8. Executing AST frontend in derive mode using pre-parsed AST for module `\ShiftLeftOne'.
Parameter \ADDR_W = 64
Generating RTLIL representation for module `$paramod\ShiftLeftOne\ADDR_W=64'.

13.1.9. Executing AST frontend in derive mode using pre-parsed AST for module `\PCSrc'.
Parameter \DATA_W = 64
Generating RTLIL representation for module `$paramod\PCSrc\DATA_W=64'.

13.1.10. Executing AST frontend in derive mode using pre-parsed AST for module `\ImmGen'.
Parameter \INST_W = 32
Parameter \DATA_W = 64
Generating RTLIL representation for module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Note: Assuming pure combinatorial block at ./codes/imm_gen.v:11 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.

13.1.11. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Parameter \DATA_W = 64
Found cached RTLIL representation for module `$paramod\Mux\DATA_W=64'.

13.1.12. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Parameter \DATA_W = 64
Generating RTLIL representation for module `$paramod\RegisterFile\DATA_W=64'.
Warning: Replacing memory \registers with list of registers. See ./codes/register_file.v:36
Warning: Replacing memory \registers_w with list of registers. See ./codes/register_file.v:29, ./codes/register_file.v:21

13.1.13. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux'.
Parameter \DATA_W = 64
Found cached RTLIL representation for module `$paramod\Mux\DATA_W=64'.

13.1.14. Executing AST frontend in derive mode using pre-parsed AST for module `\Adder'.
Parameter \DATA_W = 64
Found cached RTLIL representation for module `$paramod\Adder\DATA_W=64'.

13.1.15. Analyzing design hierarchy..
Top module:  \cpu
Used module:     $paramod\Mux\DATA_W=64
Used module:     \ForwardingUnit
Used module:     $paramod\ALU\DATA_W=64
Used module:     \ALUControl
Used module:     \HazardDetectionUnit
Used module:     $paramod\Adder\DATA_W=64
Used module:     $paramod\ShiftLeftOne\ADDR_W=64
Used module:     $paramod\PCSrc\DATA_W=64
Used module:     $paramod\ImmGen\INST_W=32\DATA_W=64
Used module:     \Control
Used module:     $paramod\RegisterFile\DATA_W=64

13.1.16. Analyzing design hierarchy..
Top module:  \cpu
Used module:     $paramod\Mux\DATA_W=64
Used module:     \ForwardingUnit
Used module:     $paramod\ALU\DATA_W=64
Used module:     \ALUControl
Used module:     \HazardDetectionUnit
Used module:     $paramod\Adder\DATA_W=64
Used module:     $paramod\ShiftLeftOne\ADDR_W=64
Used module:     $paramod\PCSrc\DATA_W=64
Used module:     $paramod\ImmGen\INST_W=32\DATA_W=64
Used module:     \Control
Used module:     $paramod\RegisterFile\DATA_W=64
Removing unused module `\PCSrc'.
Removing unused module `\ShiftLeftOne'.
Removing unused module `\Adder'.
Removing unused module `\RegisterFile'.
Removing unused module `\Mux'.
Removing unused module `\ImmGen'.
Removing unused module `\ALU'.
Removed 7 unused modules.

13.2. Executing PROC pass (convert processes to netlists).

13.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

13.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./codes/register_file.v:33$359 in module $paramod\RegisterFile\DATA_W=64.
Removed 5 dead cases from process $proc$./codes/register_file.v:19$339 in module $paramod\RegisterFile\DATA_W=64.
Marked 6 switch rules as full_case in process $proc$./codes/register_file.v:19$339 in module $paramod\RegisterFile\DATA_W=64.
Marked 1 switch rules as full_case in process $proc$./codes/imm_gen.v:11$237 in module $paramod\ImmGen\INST_W=32\DATA_W=64.
Marked 3 switch rules as full_case in process $proc$./codes/pc_source.v:11$230 in module $paramod\PCSrc\DATA_W=64.
Marked 1 switch rules as full_case in process $proc$./codes/hazard_detection_unit.v:9$193 in module HazardDetectionUnit.
Marked 4 switch rules as full_case in process $proc$./codes/forwarding_unit.v:12$164 in module ForwardingUnit.
Marked 1 switch rules as full_case in process $proc$./codes/adder.v:10$222 in module $paramod\Adder\DATA_W=64.
Marked 1 switch rules as full_case in process $proc$./codes/alu.v:10$214 in module $paramod\ALU\DATA_W=64.
Marked 1 switch rules as full_case in process $proc$./codes/control.v:12$38 in module Control.
Marked 4 switch rules as full_case in process $proc$./codes/alu_control.v:8$34 in module ALUControl.
Removed 1 dead cases from process $proc$./codes/mux.v:12$213 in module $paramod\Mux\DATA_W=64.
Marked 1 switch rules as full_case in process $proc$./codes/mux.v:12$213 in module $paramod\Mux\DATA_W=64.
Marked 1 switch rules as full_case in process $proc$./codes/cpu.v:437$24 in module cpu.
Marked 1 switch rules as full_case in process $proc$./codes/cpu.v:413$23 in module cpu.
Marked 2 switch rules as full_case in process $proc$./codes/cpu.v:387$20 in module cpu.
Marked 1 switch rules as full_case in process $proc$./codes/cpu.v:245$19 in module cpu.
Marked 1 switch rules as full_case in process $proc$./codes/cpu.v:215$17 in module cpu.
Marked 2 switch rules as full_case in process $proc$./codes/cpu.v:172$10 in module cpu.
Removed a total of 6 dead cases.

13.2.3. Executing PROC_INIT pass (extract init attributes).

13.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst_n in `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
Found async reset \i_rst_n in `\cpu.$proc$./codes/cpu.v:437$24'.

13.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
     1/34: $2\i[31:0]
     2/34: $1\i[31:0]
     3/34: $0\registers[31][63:0]
     4/34: $0\registers[30][63:0]
     5/34: $0\registers[29][63:0]
     6/34: $0\registers[28][63:0]
     7/34: $0\registers[27][63:0]
     8/34: $0\registers[26][63:0]
     9/34: $0\registers[25][63:0]
    10/34: $0\registers[24][63:0]
    11/34: $0\registers[23][63:0]
    12/34: $0\registers[22][63:0]
    13/34: $0\registers[21][63:0]
    14/34: $0\registers[20][63:0]
    15/34: $0\registers[19][63:0]
    16/34: $0\registers[18][63:0]
    17/34: $0\registers[17][63:0]
    18/34: $0\registers[16][63:0]
    19/34: $0\registers[15][63:0]
    20/34: $0\registers[14][63:0]
    21/34: $0\registers[13][63:0]
    22/34: $0\registers[12][63:0]
    23/34: $0\registers[11][63:0]
    24/34: $0\registers[10][63:0]
    25/34: $0\registers[9][63:0]
    26/34: $0\registers[8][63:0]
    27/34: $0\registers[7][63:0]
    28/34: $0\registers[6][63:0]
    29/34: $0\registers[5][63:0]
    30/34: $0\registers[4][63:0]
    31/34: $0\registers[3][63:0]
    32/34: $0\registers[2][63:0]
    33/34: $0\registers[1][63:0]
    34/34: $0\registers[0][63:0]
Creating decoders for process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
     1/150: $1$mem2reg_rd$\registers_w$./codes/register_file.v:30$338_DATA[63:0]$358
     2/150: $1$mem2reg_rd$\registers_w$./codes/register_file.v:29$337_DATA[63:0]$357
     3/150: $3\registers_w[0][63:0]
     4/150: $3\registers_w[31][63:0]
     5/150: $3\registers_w[30][63:0]
     6/150: $3\registers_w[29][63:0]
     7/150: $3\registers_w[28][63:0]
     8/150: $3\registers_w[27][63:0]
     9/150: $3\registers_w[26][63:0]
    10/150: $3\registers_w[25][63:0]
    11/150: $3\registers_w[24][63:0]
    12/150: $3\registers_w[23][63:0]
    13/150: $3\registers_w[22][63:0]
    14/150: $3\registers_w[21][63:0]
    15/150: $3\registers_w[20][63:0]
    16/150: $3\registers_w[19][63:0]
    17/150: $3\registers_w[18][63:0]
    18/150: $3\registers_w[17][63:0]
    19/150: $3\registers_w[16][63:0]
    20/150: $3\registers_w[15][63:0]
    21/150: $3\registers_w[14][63:0]
    22/150: $3\registers_w[13][63:0]
    23/150: $3\registers_w[12][63:0]
    24/150: $3\registers_w[11][63:0]
    25/150: $3\registers_w[10][63:0]
    26/150: $3\registers_w[9][63:0]
    27/150: $3\registers_w[8][63:0]
    28/150: $3\registers_w[4][63:0]
    29/150: $3\registers_w[5][63:0]
    30/150: $3\registers_w[3][63:0]
    31/150: $3\registers_w[6][63:0]
    32/150: $3\registers_w[7][63:0]
    33/150: $3\registers_w[2][63:0]
    34/150: $3\registers_w[1][63:0]
    35/150: $2$mem2reg_rd$\registers$./codes/register_file.v:27$336_DATA[63:0]$356
    36/150: $2\registers_w[0][63:0]
    37/150: $2\registers_w[31][63:0]
    38/150: $2\registers_w[30][63:0]
    39/150: $2\registers_w[29][63:0]
    40/150: $2\registers_w[28][63:0]
    41/150: $2\registers_w[27][63:0]
    42/150: $2\registers_w[26][63:0]
    43/150: $2\registers_w[25][63:0]
    44/150: $2\registers_w[24][63:0]
    45/150: $2\registers_w[23][63:0]
    46/150: $2\registers_w[22][63:0]
    47/150: $2\registers_w[21][63:0]
    48/150: $2\registers_w[20][63:0]
    49/150: $2\registers_w[19][63:0]
    50/150: $2\registers_w[18][63:0]
    51/150: $2\registers_w[17][63:0]
    52/150: $2\registers_w[16][63:0]
    53/150: $2\registers_w[15][63:0]
    54/150: $2\registers_w[14][63:0]
    55/150: $2\registers_w[13][63:0]
    56/150: $2\registers_w[12][63:0]
    57/150: $2\registers_w[11][63:0]
    58/150: $2\registers_w[10][63:0]
    59/150: $2\registers_w[9][63:0]
    60/150: $2\registers_w[8][63:0]
    61/150: $2\registers_w[4][63:0]
    62/150: $2\registers_w[5][63:0]
    63/150: $2\registers_w[3][63:0]
    64/150: $2\registers_w[6][63:0]
    65/150: $2\registers_w[7][63:0]
    66/150: $2\registers_w[2][63:0]
    67/150: $2\registers_w[1][63:0]
    68/150: $1\registers_w[31][63:0]
    69/150: $1\registers_w[30][63:0]
    70/150: $1\registers_w[29][63:0]
    71/150: $1\registers_w[28][63:0]
    72/150: $1\registers_w[27][63:0]
    73/150: $1\registers_w[26][63:0]
    74/150: $1\registers_w[25][63:0]
    75/150: $1\registers_w[24][63:0]
    76/150: $1\registers_w[23][63:0]
    77/150: $1\registers_w[22][63:0]
    78/150: $1\registers_w[21][63:0]
    79/150: $1\registers_w[20][63:0]
    80/150: $1\registers_w[19][63:0]
    81/150: $1\registers_w[18][63:0]
    82/150: $1\registers_w[17][63:0]
    83/150: $1\registers_w[16][63:0]
    84/150: $1\registers_w[15][63:0]
    85/150: $1\registers_w[14][63:0]
    86/150: $1\registers_w[13][63:0]
    87/150: $1\registers_w[12][63:0]
    88/150: $1\registers_w[11][63:0]
    89/150: $1\registers_w[10][63:0]
    90/150: $1\registers_w[9][63:0]
    91/150: $1\registers_w[8][63:0]
    92/150: $1\registers_w[4][63:0]
    93/150: $1\registers_w[5][63:0]
    94/150: $1\registers_w[3][63:0]
    95/150: $1\registers_w[6][63:0]
    96/150: $1\registers_w[7][63:0]
    97/150: $1\registers_w[0][63:0]
    98/150: $1\registers_w[2][63:0]
    99/150: $1\registers_w[1][63:0]
   100/150: $1$mem2reg_wr$\registers_w$./codes/register_file.v:24$334_ADDR[4:0]$351
   101/150: $1$mem2reg_wr$\registers_w$./codes/register_file.v:24$334_DATA[63:0]$354
   102/150: $1$mem2reg_wr$\registers_w$./codes/register_file.v:27$335_DATA[63:0]$355
   103/150: $1$mem2reg_rd$\registers$./codes/register_file.v:27$336_DATA[63:0]$353
   104/150: $1$mem2reg_rd$\registers$./codes/register_file.v:27$336_ADDR[4:0]$352
   105/150: $1$mem2reg_wr$\registers_w$./codes/register_file.v:27$335_ADDR[4:0]$350
   106/150: $0\o_read_data2[63:0]
   107/150: $0$mem2reg_rd$\registers_w$./codes/register_file.v:30$338_DATA[63:0]$349
   108/150: $0$mem2reg_rd$\registers_w$./codes/register_file.v:30$338_ADDR[4:0]$342
   109/150: $0\o_read_data1[63:0]
   110/150: $0$mem2reg_rd$\registers_w$./codes/register_file.v:29$337_DATA[63:0]$341
   111/150: $0$mem2reg_rd$\registers_w$./codes/register_file.v:29$337_ADDR[4:0]$347
   112/150: $0$mem2reg_wr$\registers_w$./codes/register_file.v:27$335_DATA[63:0]$348
   113/150: $0$mem2reg_wr$\registers_w$./codes/register_file.v:24$334_DATA[63:0]$346
   114/150: $0$mem2reg_rd$\registers$./codes/register_file.v:27$336_DATA[63:0]$345
   115/150: $0$mem2reg_rd$\registers$./codes/register_file.v:27$336_ADDR[4:0]$344
   116/150: $0$mem2reg_wr$\registers_w$./codes/register_file.v:24$334_ADDR[4:0]$343
   117/150: $0$mem2reg_wr$\registers_w$./codes/register_file.v:27$335_ADDR[4:0]$340
   118/150: $0\registers_w[31][63:0]
   119/150: $0\registers_w[30][63:0]
   120/150: $0\registers_w[29][63:0]
   121/150: $0\registers_w[28][63:0]
   122/150: $0\registers_w[27][63:0]
   123/150: $0\registers_w[26][63:0]
   124/150: $0\registers_w[25][63:0]
   125/150: $0\registers_w[24][63:0]
   126/150: $0\registers_w[23][63:0]
   127/150: $0\registers_w[22][63:0]
   128/150: $0\registers_w[21][63:0]
   129/150: $0\registers_w[20][63:0]
   130/150: $0\registers_w[19][63:0]
   131/150: $0\registers_w[18][63:0]
   132/150: $0\registers_w[17][63:0]
   133/150: $0\registers_w[16][63:0]
   134/150: $0\registers_w[15][63:0]
   135/150: $0\registers_w[14][63:0]
   136/150: $0\registers_w[13][63:0]
   137/150: $0\registers_w[12][63:0]
   138/150: $0\registers_w[11][63:0]
   139/150: $0\registers_w[10][63:0]
   140/150: $0\registers_w[9][63:0]
   141/150: $0\registers_w[8][63:0]
   142/150: $0\registers_w[4][63:0]
   143/150: $0\registers_w[5][63:0]
   144/150: $0\registers_w[3][63:0]
   145/150: $0\registers_w[6][63:0]
   146/150: $0\registers_w[7][63:0]
   147/150: $0\registers_w[0][63:0]
   148/150: $0\registers_w[2][63:0]
   149/150: $0\registers_w[1][63:0]
   150/150: $0\i[31:0]
Creating decoders for process `$paramod\ImmGen\INST_W=32\DATA_W=64.$proc$./codes/imm_gen.v:11$237'.
     1/3: $1\o_imm[63:0]
     2/3: $0\o_imm[63:0]
     3/3: $0\opcode[6:0]
Creating decoders for process `$paramod\PCSrc\DATA_W=64.$proc$./codes/pc_source.v:11$230'.
     1/4: $3\o_PCSrc[0:0]
     2/4: $2\o_PCSrc[0:0]
     3/4: $1\o_PCSrc[0:0]
     4/4: $0\o_PCSrc[0:0]
Creating decoders for process `\HazardDetectionUnit.$proc$./codes/hazard_detection_unit.v:9$193'.
     1/2: $1\o_stall[0:0]
     2/2: $0\o_stall[0:0]
Creating decoders for process `\ForwardingUnit.$proc$./codes/forwarding_unit.v:12$164'.
     1/6: $2\o_ForwardB[1:0]
     2/6: $1\o_ForwardB[1:0]
     3/6: $2\o_ForwardA[1:0]
     4/6: $1\o_ForwardA[1:0]
     5/6: $0\o_ForwardB[1:0]
     6/6: $0\o_ForwardA[1:0]
Creating decoders for process `$paramod\ShiftLeftOne\ADDR_W=64.$proc$./codes/shift_left_one.v:8$229'.
     1/1: $0\o_data[63:0]
Creating decoders for process `$paramod\Adder\DATA_W=64.$proc$./codes/adder.v:10$222'.
     1/4: $1\o_data[63:0]
     2/4: $1\data_b_positive[12:0]
     3/4: $0\data_b_positive[12:0]
     4/4: $0\o_data[63:0]
Creating decoders for process `$paramod\ALU\DATA_W=64.$proc$./codes/alu.v:10$214'.
     1/2: $1\o_data[63:0]
     2/2: $0\o_data[63:0]
Creating decoders for process `\Control.$proc$./codes/control.v:12$38'.
     1/8: $1\o_WB_control[1:0]
     2/8: $1\o_MEM_control[1:0]
     3/8: $1\o_EX_control[2:0]
     4/8: $1\o_ID_control[0:0]
     5/8: $0\o_WB_control[1:0]
     6/8: $0\o_MEM_control[1:0]
     7/8: $0\o_EX_control[2:0]
     8/8: $0\o_ID_control[0:0]
Creating decoders for process `\ALUControl.$proc$./codes/alu_control.v:8$34'.
     1/5: $4\o_ALU_Optype[3:0]
     2/5: $3\o_ALU_Optype[3:0]
     3/5: $2\o_ALU_Optype[3:0]
     4/5: $1\o_ALU_Optype[3:0]
     5/5: $0\o_ALU_Optype[3:0]
Creating decoders for process `$paramod\Mux\DATA_W=64.$proc$./codes/mux.v:12$213'.
     1/2: $1\o_data[63:0]
     2/2: $0\o_data[63:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:437$24'.
     1/9: $4\count_cycles[31:0]
     2/9: $0\o_finish_r[0:0]
     3/9: $0\o_d_MemWrite_r[0:0]
     4/9: $0\o_d_MemRead_r[0:0]
     5/9: $0\o_d_r_addr_r[63:0]
     6/9: $0\o_d_w_addr_r[63:0]
     7/9: $0\o_d_w_data_r[63:0]
     8/9: $0\o_i_addr_r[63:0]
     9/9: $0\o_i_valid_addr_r[0:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:413$23'.
     1/2: $1\MEM_dm_read_data_r[63:0]
     2/2: $0\MEM_dm_read_data_r[63:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:387$20'.
     1/15: $2\o_d_MemWrite_w[0:0]
     2/15: $2\o_d_MemRead_w[0:0]
     3/15: $2\o_d_r_addr_w[63:0]
     4/15: $2\o_d_w_addr_w[63:0]
     5/15: $2\o_d_w_data_w[63:0]
     6/15: $1\o_d_MemWrite_w[0:0]
     7/15: $1\o_d_MemRead_w[0:0]
     8/15: $1\o_d_r_addr_w[63:0]
     9/15: $1\o_d_w_addr_w[63:0]
    10/15: $1\o_d_w_data_w[63:0]
    11/15: $0\o_d_MemWrite_w[0:0]
    12/15: $0\o_d_MemRead_w[0:0]
    13/15: $0\o_d_r_addr_w[63:0]
    14/15: $0\o_d_w_addr_w[63:0]
    15/15: $0\o_d_w_data_w[63:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:245$19'.
     1/2: $2\is_load_use_hazard[31:0]
     2/2: $1\is_load_use_hazard[31:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:215$17'.
     1/2: $2\o_i_valid_addr_w[0:0]
     2/2: $1\o_i_valid_addr_w[0:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:207$14'.
     1/4: $3\count_cycles[31:0]
     2/4: $0\is_load_use_hazard[31:0]
     3/4: $0\o_i_addr_w[63:0]
     4/4: $0\o_i_valid_addr_w[0:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:172$10'.
     1/16: $2\o_finish_w[0:0]
     2/16: $2\count_cycles[31:0]
     3/16: $1\count_cycles[31:0]
     4/16: $1\o_finish_w[0:0]
     5/16: $1\IF_PC_prev[63:0]
     6/16: $1\IF_inst_prev[31:0]
     7/16: $1\IF_PC_r[63:0]
     8/16: $1\IF_inst_r[31:0]
     9/16: $1\is_inst_changed[31:0]
    10/16: $0\is_inst_changed[31:0]
    11/16: $0\count_cycles[31:0]
    12/16: $0\IF_inst_prev[31:0]
    13/16: $0\IF_PC_prev[63:0]
    14/16: $0\IF_inst_r[31:0]
    15/16: $0\IF_PC_r[63:0]
    16/16: $0\o_finish_w[0:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:160$8'.
     1/4: $0\MEMWB_WB_control_r[1:0]
     2/4: $0\MEMWB_rd_r[4:0]
     3/4: $0\MEMWB_ALU_result_data_r[63:0]
     4/4: $0\MEMWB_dm_read_data_r[63:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:147$6'.
     1/5: $0\EXMEM_WB_control_r[1:0]
     2/5: $0\EXMEM_MEM_control_r[1:0]
     3/5: $0\EXMEM_rd_r[4:0]
     4/5: $0\EXMEM_write_data_r[63:0]
     5/5: $0\EXMEM_ALU_result_data_r[63:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:126$4'.
     1/11: $0\IDEX_WB_control_r[1:0]
     2/11: $0\IDEX_MEM_control_r[1:0]
     3/11: $0\IDEX_EX_control_r[2:0]
     4/11: $0\IDEX_rd_r[4:0]
     5/11: $0\IDEX_rs2_r[4:0]
     6/11: $0\IDEX_rs1_r[4:0]
     7/11: $0\IDEX_funct3_r[2:0]
     8/11: $0\IDEX_inst30_r[0:0]
     9/11: $0\IDEX_imm_r[63:0]
    10/11: $0\IDEX_read_data2_r[63:0]
    11/11: $0\IDEX_read_data1_r[63:0]
Creating decoders for process `\cpu.$proc$./codes/cpu.v:115$1'.
     1/2: $0\IFID_inst_r[31:0]
     2/2: $0\IFID_PC_r[63:0]

13.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\o_read_data1' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\o_read_data2' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[1]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[2]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[0]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\i' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[7]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[6]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[3]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[5]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[4]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[8]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[9]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[10]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[11]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[12]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[13]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[14]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[15]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[16]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[17]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[18]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[19]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[20]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[21]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[22]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[23]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[24]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[25]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[26]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[27]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[28]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[29]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[30]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.\registers_w[31]' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_wr$\registers_w$./codes/register_file.v:27$335_ADDR' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_rd$\registers_w$./codes/register_file.v:29$337_DATA' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_rd$\registers_w$./codes/register_file.v:30$338_ADDR' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_wr$\registers_w$./codes/register_file.v:24$334_ADDR' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_rd$\registers$./codes/register_file.v:27$336_ADDR' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_rd$\registers$./codes/register_file.v:27$336_DATA' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_wr$\registers_w$./codes/register_file.v:24$334_DATA' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_rd$\registers_w$./codes/register_file.v:29$337_ADDR' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_wr$\registers_w$./codes/register_file.v:27$335_DATA' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\RegisterFile\DATA_W=64.$mem2reg_rd$\registers_w$./codes/register_file.v:30$338_DATA' from process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
No latch inferred for signal `$paramod\ImmGen\INST_W=32\DATA_W=64.\o_imm' from process `$paramod\ImmGen\INST_W=32\DATA_W=64.$proc$./codes/imm_gen.v:11$237'.
No latch inferred for signal `$paramod\ImmGen\INST_W=32\DATA_W=64.\opcode' from process `$paramod\ImmGen\INST_W=32\DATA_W=64.$proc$./codes/imm_gen.v:11$237'.
No latch inferred for signal `$paramod\PCSrc\DATA_W=64.\o_PCSrc' from process `$paramod\PCSrc\DATA_W=64.$proc$./codes/pc_source.v:11$230'.
No latch inferred for signal `\HazardDetectionUnit.\o_stall' from process `\HazardDetectionUnit.$proc$./codes/hazard_detection_unit.v:9$193'.
No latch inferred for signal `\ForwardingUnit.\o_ForwardA' from process `\ForwardingUnit.$proc$./codes/forwarding_unit.v:12$164'.
No latch inferred for signal `\ForwardingUnit.\o_ForwardB' from process `\ForwardingUnit.$proc$./codes/forwarding_unit.v:12$164'.
No latch inferred for signal `$paramod\ShiftLeftOne\ADDR_W=64.\o_data' from process `$paramod\ShiftLeftOne\ADDR_W=64.$proc$./codes/shift_left_one.v:8$229'.
No latch inferred for signal `$paramod\Adder\DATA_W=64.\o_data' from process `$paramod\Adder\DATA_W=64.$proc$./codes/adder.v:10$222'.
Latch inferred for signal `$paramod\Adder\DATA_W=64.\data_b_positive' from process `$paramod\Adder\DATA_W=64.$proc$./codes/adder.v:10$222': $auto$proc_dlatch.cc:409:proc_dlatch$3156
No latch inferred for signal `$paramod\ALU\DATA_W=64.\o_data' from process `$paramod\ALU\DATA_W=64.$proc$./codes/alu.v:10$214'.
No latch inferred for signal `\Control.\o_ID_control' from process `\Control.$proc$./codes/control.v:12$38'.
No latch inferred for signal `\Control.\o_EX_control' from process `\Control.$proc$./codes/control.v:12$38'.
No latch inferred for signal `\Control.\o_MEM_control' from process `\Control.$proc$./codes/control.v:12$38'.
No latch inferred for signal `\Control.\o_WB_control' from process `\Control.$proc$./codes/control.v:12$38'.
No latch inferred for signal `\ALUControl.\o_ALU_Optype' from process `\ALUControl.$proc$./codes/alu_control.v:8$34'.
No latch inferred for signal `$paramod\Mux\DATA_W=64.\o_data' from process `$paramod\Mux\DATA_W=64.$proc$./codes/mux.v:12$213'.
No latch inferred for signal `\cpu.\MEM_dm_read_data_r' from process `\cpu.$proc$./codes/cpu.v:413$23'.
No latch inferred for signal `\cpu.\o_d_w_data_w' from process `\cpu.$proc$./codes/cpu.v:387$20'.
No latch inferred for signal `\cpu.\o_d_w_addr_w' from process `\cpu.$proc$./codes/cpu.v:387$20'.
No latch inferred for signal `\cpu.\o_d_r_addr_w' from process `\cpu.$proc$./codes/cpu.v:387$20'.
No latch inferred for signal `\cpu.\o_d_MemRead_w' from process `\cpu.$proc$./codes/cpu.v:387$20'.
No latch inferred for signal `\cpu.\o_d_MemWrite_w' from process `\cpu.$proc$./codes/cpu.v:387$20'.
Latch inferred for signal `\cpu.\is_load_use_hazard' from process `\cpu.$proc$./codes/cpu.v:245$19': $auto$proc_dlatch.cc:409:proc_dlatch$3167
No latch inferred for signal `\cpu.\o_i_valid_addr_w' from process `\cpu.$proc$./codes/cpu.v:215$17'.
No latch inferred for signal `\cpu.\o_i_valid_addr_w' from process `\cpu.$proc$./codes/cpu.v:207$14'.
No latch inferred for signal `\cpu.\o_i_addr_w' from process `\cpu.$proc$./codes/cpu.v:207$14'.
No latch inferred for signal `\cpu.\count_cycles' from process `\cpu.$proc$./codes/cpu.v:207$14'.
No latch inferred for signal `\cpu.\is_load_use_hazard' from process `\cpu.$proc$./codes/cpu.v:207$14'.
No latch inferred for signal `\cpu.\o_finish_w' from process `\cpu.$proc$./codes/cpu.v:172$10'.
No latch inferred for signal `\cpu.\IF_PC_r' from process `\cpu.$proc$./codes/cpu.v:172$10'.
No latch inferred for signal `\cpu.\IF_inst_r' from process `\cpu.$proc$./codes/cpu.v:172$10'.
No latch inferred for signal `\cpu.\IF_PC_prev' from process `\cpu.$proc$./codes/cpu.v:172$10'.
No latch inferred for signal `\cpu.\IF_inst_prev' from process `\cpu.$proc$./codes/cpu.v:172$10'.
Latch inferred for signal `\cpu.\count_cycles' from process `\cpu.$proc$./codes/cpu.v:172$10': $auto$proc_dlatch.cc:409:proc_dlatch$3196
Latch inferred for signal `\cpu.\is_inst_changed' from process `\cpu.$proc$./codes/cpu.v:172$10': $auto$proc_dlatch.cc:409:proc_dlatch$3201
Latch inferred for signal `\cpu.\MEMWB_dm_read_data_r' from process `\cpu.$proc$./codes/cpu.v:160$8': $auto$proc_dlatch.cc:409:proc_dlatch$3212
Latch inferred for signal `\cpu.\MEMWB_ALU_result_data_r' from process `\cpu.$proc$./codes/cpu.v:160$8': $auto$proc_dlatch.cc:409:proc_dlatch$3215
Latch inferred for signal `\cpu.\MEMWB_rd_r' from process `\cpu.$proc$./codes/cpu.v:160$8': $auto$proc_dlatch.cc:409:proc_dlatch$3218
Latch inferred for signal `\cpu.\MEMWB_WB_control_r' from process `\cpu.$proc$./codes/cpu.v:160$8': $auto$proc_dlatch.cc:409:proc_dlatch$3221
Latch inferred for signal `\cpu.\EXMEM_ALU_result_data_r' from process `\cpu.$proc$./codes/cpu.v:147$6': $auto$proc_dlatch.cc:409:proc_dlatch$3232
Latch inferred for signal `\cpu.\EXMEM_write_data_r' from process `\cpu.$proc$./codes/cpu.v:147$6': $auto$proc_dlatch.cc:409:proc_dlatch$3235
Latch inferred for signal `\cpu.\EXMEM_rd_r' from process `\cpu.$proc$./codes/cpu.v:147$6': $auto$proc_dlatch.cc:409:proc_dlatch$3238
Latch inferred for signal `\cpu.\EXMEM_MEM_control_r' from process `\cpu.$proc$./codes/cpu.v:147$6': $auto$proc_dlatch.cc:409:proc_dlatch$3241
Latch inferred for signal `\cpu.\EXMEM_WB_control_r' from process `\cpu.$proc$./codes/cpu.v:147$6': $auto$proc_dlatch.cc:409:proc_dlatch$3244
Latch inferred for signal `\cpu.\IDEX_read_data1_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3255
Latch inferred for signal `\cpu.\IDEX_read_data2_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3258
Latch inferred for signal `\cpu.\IDEX_imm_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3261
Latch inferred for signal `\cpu.\IDEX_inst30_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3264
Latch inferred for signal `\cpu.\IDEX_funct3_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3267
Latch inferred for signal `\cpu.\IDEX_rs1_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3270
Latch inferred for signal `\cpu.\IDEX_rs2_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3273
Latch inferred for signal `\cpu.\IDEX_rd_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3276
Latch inferred for signal `\cpu.\IDEX_EX_control_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3279
Latch inferred for signal `\cpu.\IDEX_MEM_control_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3282
Latch inferred for signal `\cpu.\IDEX_WB_control_r' from process `\cpu.$proc$./codes/cpu.v:126$4': $auto$proc_dlatch.cc:409:proc_dlatch$3285
Latch inferred for signal `\cpu.\IFID_PC_r' from process `\cpu.$proc$./codes/cpu.v:115$1': $auto$proc_dlatch.cc:409:proc_dlatch$3308
Latch inferred for signal `\cpu.\IFID_inst_r' from process `\cpu.$proc$./codes/cpu.v:115$1': $auto$proc_dlatch.cc:409:proc_dlatch$3311

13.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\i' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $dff cell `$procdff$3312' with positive edge clock.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[0]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3313' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[1]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3314' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[2]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3315' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[3]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3316' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[4]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3317' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[5]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3318' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[6]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3319' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[7]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3320' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[8]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3321' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[9]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3322' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[10]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3323' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[11]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3324' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[12]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3325' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[13]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3326' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[14]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3327' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[15]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3328' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[16]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3329' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[17]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3330' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[18]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3331' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[19]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3332' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[20]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3333' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[21]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3334' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[22]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3335' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[23]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3336' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[24]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3337' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[25]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3338' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[26]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3339' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[27]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3340' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[28]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3341' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[29]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3342' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[30]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3343' with positive edge clock and negative level reset.
Creating register for signal `$paramod\RegisterFile\DATA_W=64.\registers[31]' using process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
  created $adff cell `$procdff$3344' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_i_valid_addr_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3345' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_i_addr_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3346' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_d_w_data_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3347' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_d_w_addr_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3348' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_d_r_addr_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3349' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_d_MemRead_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3350' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_d_MemWrite_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3351' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\o_finish_r' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $adff cell `$procdff$3352' with positive edge clock and negative level reset.
Creating register for signal `\cpu.\count_cycles' using process `\cpu.$proc$./codes/cpu.v:437$24'.
  created $dff cell `$procdff$3353' with positive edge clock.

13.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:33$359'.
Found and cleaned up 6 empty switches in `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
Removing empty process `$paramod\RegisterFile\DATA_W=64.$proc$./codes/register_file.v:19$339'.
Found and cleaned up 1 empty switch in `$paramod\ImmGen\INST_W=32\DATA_W=64.$proc$./codes/imm_gen.v:11$237'.
Removing empty process `$paramod\ImmGen\INST_W=32\DATA_W=64.$proc$./codes/imm_gen.v:11$237'.
Found and cleaned up 3 empty switches in `$paramod\PCSrc\DATA_W=64.$proc$./codes/pc_source.v:11$230'.
Removing empty process `$paramod\PCSrc\DATA_W=64.$proc$./codes/pc_source.v:11$230'.
Found and cleaned up 1 empty switch in `\HazardDetectionUnit.$proc$./codes/hazard_detection_unit.v:9$193'.
Removing empty process `HazardDetectionUnit.$proc$./codes/hazard_detection_unit.v:9$193'.
Found and cleaned up 4 empty switches in `\ForwardingUnit.$proc$./codes/forwarding_unit.v:12$164'.
Removing empty process `ForwardingUnit.$proc$./codes/forwarding_unit.v:12$164'.
Removing empty process `$paramod\ShiftLeftOne\ADDR_W=64.$proc$./codes/shift_left_one.v:8$229'.
Found and cleaned up 1 empty switch in `$paramod\Adder\DATA_W=64.$proc$./codes/adder.v:10$222'.
Removing empty process `$paramod\Adder\DATA_W=64.$proc$./codes/adder.v:10$222'.
Found and cleaned up 1 empty switch in `$paramod\ALU\DATA_W=64.$proc$./codes/alu.v:10$214'.
Removing empty process `$paramod\ALU\DATA_W=64.$proc$./codes/alu.v:10$214'.
Found and cleaned up 1 empty switch in `\Control.$proc$./codes/control.v:12$38'.
Removing empty process `Control.$proc$./codes/control.v:12$38'.
Found and cleaned up 4 empty switches in `\ALUControl.$proc$./codes/alu_control.v:8$34'.
Removing empty process `ALUControl.$proc$./codes/alu_control.v:8$34'.
Found and cleaned up 1 empty switch in `$paramod\Mux\DATA_W=64.$proc$./codes/mux.v:12$213'.
Removing empty process `$paramod\Mux\DATA_W=64.$proc$./codes/mux.v:12$213'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:437$24'.
Removing empty process `cpu.$proc$./codes/cpu.v:437$24'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:413$23'.
Removing empty process `cpu.$proc$./codes/cpu.v:413$23'.
Found and cleaned up 2 empty switches in `\cpu.$proc$./codes/cpu.v:387$20'.
Removing empty process `cpu.$proc$./codes/cpu.v:387$20'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:245$19'.
Removing empty process `cpu.$proc$./codes/cpu.v:245$19'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:215$17'.
Removing empty process `cpu.$proc$./codes/cpu.v:215$17'.
Removing empty process `cpu.$proc$./codes/cpu.v:207$14'.
Found and cleaned up 2 empty switches in `\cpu.$proc$./codes/cpu.v:172$10'.
Removing empty process `cpu.$proc$./codes/cpu.v:172$10'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:160$8'.
Removing empty process `cpu.$proc$./codes/cpu.v:160$8'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:147$6'.
Removing empty process `cpu.$proc$./codes/cpu.v:147$6'.
Found and cleaned up 1 empty switch in `\cpu.$proc$./codes/cpu.v:126$4'.
Removing empty process `cpu.$proc$./codes/cpu.v:126$4'.
Found and cleaned up 2 empty switches in `\cpu.$proc$./codes/cpu.v:115$1'.
Removing empty process `cpu.$proc$./codes/cpu.v:115$1'.
Cleaned up 36 empty switches.

13.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\RegisterFile\DATA_W=64.
<suppressed ~67 debug messages>
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
<suppressed ~2 debug messages>
Optimizing module HazardDetectionUnit.
Optimizing module ForwardingUnit.
<suppressed ~6 debug messages>
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
<suppressed ~6 debug messages>
Optimizing module $paramod\ALU\DATA_W=64.
<suppressed ~1 debug messages>
Optimizing module Control.
Optimizing module ALUControl.
<suppressed ~3 debug messages>
Optimizing module $paramod\Mux\DATA_W=64.
<suppressed ~1 debug messages>
Optimizing module cpu.
<suppressed ~113 debug messages>

13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module \cpu..
Removed 25 unused cells and 671 unused wires.
<suppressed ~40 debug messages>

13.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\ALU\DATA_W=64..
checking module $paramod\Adder\DATA_W=64..
checking module $paramod\ImmGen\INST_W=32\DATA_W=64..
checking module $paramod\Mux\DATA_W=64..
checking module $paramod\PCSrc\DATA_W=64..
checking module $paramod\RegisterFile\DATA_W=64..
checking module $paramod\ShiftLeftOne\ADDR_W=64..
checking module ALUControl..
checking module Control..
checking module ForwardingUnit..
checking module HazardDetectionUnit..
checking module cpu..
found and reported 0 problems.

13.6. Executing OPT pass (performing simple optimizations).

13.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
<suppressed ~6144 debug messages>
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
<suppressed ~24 debug messages>
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~36 debug messages>
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 2068 cells.

13.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ALU\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Adder\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ImmGen\INST_W=32\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\PCSrc\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$2892.
    dead port 2/2 on $mux $procmux$2894.
    dead port 2/2 on $mux $procmux$2900.
Running muxtree optimizer on module $paramod\RegisterFile\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$713.
    dead port 1/2 on $mux $procmux$1433.
    dead port 1/2 on $mux $procmux$1253.
    dead port 2/2 on $mux $procmux$1757.
    dead port 2/2 on $mux $procmux$2441.
    dead port 2/2 on $mux $procmux$2009.
    dead port 1/2 on $mux $procmux$1541.
    dead port 2/2 on $mux $procmux$1649.
    dead port 2/2 on $mux $procmux$2297.
    dead port 2/2 on $mux $procmux$2153.
    dead port 1/2 on $mux $procmux$749.
    dead port 2/2 on $mux $procmux$2621.
    dead port 1/2 on $mux $procmux$461.
    dead port 1/2 on $mux $procmux$1181.
    dead port 2/2 on $mux $procmux$1901.
    dead port 1/2 on $mux $procmux$1361.
    dead port 1/2 on $mux $procmux$1109.
    dead port 2/2 on $mux $procmux$2477.
    dead port 1/2 on $mux $procmux$1037.
    dead port 2/2 on $mux $procmux$2045.
    dead port 1/2 on $mux $procmux$785.
    dead port 2/2 on $mux $procmux$1793.
    dead port 2/2 on $mux $procmux$2333.
    dead port 2/2 on $mux $procmux$2657.
    dead port 1/2 on $mux $procmux$1469.
    dead port 1/2 on $mux $procmux$497.
    dead port 2/2 on $mux $procmux$2189.
    dead port 2/2 on $mux $procmux$1685.
    dead port 1/2 on $mux $procmux$1577.
    dead port 33/33 on $pmux $procmux$1579.
    dead port 1/2 on $mux $procmux$1289.
    dead port 2/2 on $mux $procmux$2513.
    dead port 2/2 on $mux $procmux$1937.
    dead port 1/2 on $mux $procmux$821.
    dead port 2/2 on $mux $procmux$2693.
    dead port 1/2 on $mux $procmux$533.
    dead port 1/2 on $mux $procmux$1217.
    dead port 2/2 on $mux $procmux$2369.
    dead port 2/2 on $mux $procmux$2081.
    dead port 1/2 on $mux $procmux$1397.
    dead port 2/2 on $mux $procmux$2225.
    dead port 2/2 on $mux $procmux$1829.
    dead port 1/2 on $mux $procmux$857.
    dead port 1/2 on $mux $procmux$1505.
    dead port 2/2 on $mux $procmux$2549.
    dead port 2/2 on $mux $procmux$1721.
    dead port 1/2 on $mux $procmux$1145.
    dead port 1/2 on $mux $procmux$1613.
    dead port 1/2 on $mux $procmux$569.
    dead port 2/2 on $mux $procmux$2729.
    dead port 2/2 on $mux $procmux$1973.
    dead port 1/2 on $mux $procmux$1073.
    dead port 2/2 on $mux $procmux$2405.
    dead port 1/2 on $mux $procmux$1001.
    dead port 1/2 on $mux $procmux$1325.
    dead port 2/2 on $mux $procmux$2117.
    dead port 2/2 on $mux $procmux$2261.
    dead port 1/2 on $mux $procmux$893.
    dead port 2/2 on $mux $procmux$2585.
    dead port 2/2 on $mux $procmux$1865.
    dead port 1/2 on $mux $procmux$605.
    dead port 2/2 on $mux $procmux$2765.
    dead port 1/2 on $mux $procmux$929.
    dead port 1/2 on $mux $procmux$641.
    dead port 1/2 on $mux $procmux$965.
    dead port 1/2 on $mux $procmux$677.
Running muxtree optimizer on module $paramod\ShiftLeftOne\ADDR_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$2976.
    dead port 1/2 on $mux $procmux$2979.
    dead port 1/2 on $mux $procmux$2982.
    dead port 1/2 on $mux $procmux$2988.
    dead port 1/2 on $mux $procmux$2991.
    dead port 1/2 on $mux $procmux$2997.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$2912.
    dead port 1/2 on $mux $procmux$2921.
Running muxtree optimizer on module \HazardDetectionUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$3020.
    dead port 1/2 on $mux $procmux$3025.
    dead port 1/2 on $mux $procmux$3030.
    dead port 1/2 on $mux $procmux$3036.
    dead port 1/2 on $mux $procmux$3042.
    dead port 2/2 on $mux $procmux$3069.
    dead port 1/2 on $mux $procmux$3084.
    dead port 1/2 on $mux $procmux$3087.
Removed 85 multiplexer ports.
<suppressed ~57 debug messages>

13.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ALU\DATA_W=64.
  Optimizing cells in module $paramod\Adder\DATA_W=64.
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
    New ctrl vector for $pmux cell $procmux$2882: { $procmux$2885_CMP $procmux$2884_CMP $auto$opt_reduce.cc:132:opt_mux$3355 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3354: { $procmux$2883_CMP $procmux$2886_CMP }
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
  Optimizing cells in module $paramod\Mux\DATA_W=64.
  Optimizing cells in module $paramod\PCSrc\DATA_W=64.
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
    New ctrl vector for $pmux cell $procmux$1183: { $procmux$1024_CMP $auto$opt_reduce.cc:132:opt_mux$3357 }
    New ctrl vector for $pmux cell $procmux$1904: { $procmux$1011_CMP $auto$opt_reduce.cc:132:opt_mux$3359 }
    New ctrl vector for $pmux cell $procmux$1363: { $procmux$1030_CMP $auto$opt_reduce.cc:132:opt_mux$3361 }
    New ctrl vector for $pmux cell $procmux$1111: { $procmux$1022_CMP $auto$opt_reduce.cc:132:opt_mux$3363 }
    New ctrl vector for $pmux cell $procmux$2480: { $procmux$1027_CMP $auto$opt_reduce.cc:132:opt_mux$3365 }
    New ctrl vector for $pmux cell $procmux$1039: { $procmux$1020_CMP $auto$opt_reduce.cc:132:opt_mux$3367 }
    New ctrl vector for $pmux cell $procmux$2048: { $procmux$1015_CMP $auto$opt_reduce.cc:132:opt_mux$3369 }
    New ctrl vector for $pmux cell $procmux$787: { $procmux$1013_CMP $auto$opt_reduce.cc:132:opt_mux$3371 }
    New ctrl vector for $pmux cell $procmux$715: { $procmux$1011_CMP $auto$opt_reduce.cc:132:opt_mux$3373 }
    New ctrl vector for $pmux cell $procmux$1796: { $procmux$1008_CMP $auto$opt_reduce.cc:132:opt_mux$3375 }
    New ctrl vector for $pmux cell $procmux$2336: { $procmux$1023_CMP $auto$opt_reduce.cc:132:opt_mux$3377 }
    New ctrl vector for $pmux cell $procmux$2660: { $procmux$1028_CMP $auto$opt_reduce.cc:132:opt_mux$3379 }
    New ctrl vector for $pmux cell $procmux$1471: { $procmux$1028_CMP $auto$opt_reduce.cc:132:opt_mux$3381 }
    New ctrl vector for $pmux cell $procmux$499: { $procmux$1005_CMP $auto$opt_reduce.cc:132:opt_mux$3383 }
    New ctrl vector for $pmux cell $procmux$2192: { $procmux$1019_CMP $auto$opt_reduce.cc:132:opt_mux$3385 }
    New ctrl vector for $pmux cell $procmux$427: { $procmux$1035_CMP $auto$opt_reduce.cc:132:opt_mux$3387 }
    New ctrl vector for $pmux cell $procmux$1688: { $procmux$1005_CMP $auto$opt_reduce.cc:132:opt_mux$3389 }
    New ctrl vector for $pmux cell $procmux$1435: { $procmux$1029_CMP $auto$opt_reduce.cc:132:opt_mux$3391 }
    New ctrl vector for $pmux cell $procmux$1291: { $procmux$1027_CMP $auto$opt_reduce.cc:132:opt_mux$3393 }
    New ctrl vector for $pmux cell $procmux$2516: { $procmux$1031_CMP $auto$opt_reduce.cc:132:opt_mux$3395 }
    New ctrl vector for $pmux cell $procmux$1940: { $procmux$1012_CMP $auto$opt_reduce.cc:132:opt_mux$3397 }
    New ctrl vector for $pmux cell $procmux$823: { $procmux$1014_CMP $auto$opt_reduce.cc:132:opt_mux$3399 }
    New ctrl vector for $pmux cell $procmux$1255: { $procmux$1026_CMP $auto$opt_reduce.cc:132:opt_mux$3401 }
    New ctrl vector for $pmux cell $procmux$2696: { $procmux$1033_CMP $auto$opt_reduce.cc:132:opt_mux$3403 }
    New ctrl vector for $pmux cell $procmux$535: { $procmux$1006_CMP $auto$opt_reduce.cc:132:opt_mux$3405 }
    New ctrl vector for $pmux cell $procmux$1760: { $procmux$1007_CMP $auto$opt_reduce.cc:132:opt_mux$3407 }
    New ctrl vector for $pmux cell $procmux$1219: { $procmux$1025_CMP $auto$opt_reduce.cc:132:opt_mux$3409 }
    New ctrl vector for $pmux cell $procmux$2372: { $procmux$1024_CMP $auto$opt_reduce.cc:132:opt_mux$3411 }
    New ctrl vector for $pmux cell $procmux$2084: { $procmux$1016_CMP $auto$opt_reduce.cc:132:opt_mux$3413 }
    New ctrl vector for $pmux cell $procmux$1399: { $procmux$1032_CMP $auto$opt_reduce.cc:132:opt_mux$3415 }
    New ctrl vector for $pmux cell $procmux$2444: { $procmux$1026_CMP $auto$opt_reduce.cc:132:opt_mux$3417 }
    New ctrl vector for $pmux cell $procmux$2228: { $procmux$1020_CMP $auto$opt_reduce.cc:132:opt_mux$3419 }
    New ctrl vector for $pmux cell $procmux$1832: { $procmux$1009_CMP $auto$opt_reduce.cc:132:opt_mux$3421 }
    New ctrl vector for $pmux cell $procmux$2012: { $procmux$1014_CMP $auto$opt_reduce.cc:132:opt_mux$3423 }
    New ctrl vector for $pmux cell $procmux$859: { $procmux$1015_CMP $auto$opt_reduce.cc:132:opt_mux$3425 }
    New ctrl vector for $pmux cell $procmux$1507: { $procmux$1033_CMP $auto$opt_reduce.cc:132:opt_mux$3427 }
    New ctrl vector for $pmux cell $procmux$1543: { $procmux$1034_CMP $auto$opt_reduce.cc:132:opt_mux$3429 }
    New ctrl vector for $pmux cell $procmux$2552: { $procmux$1030_CMP $auto$opt_reduce.cc:132:opt_mux$3431 }
    New ctrl vector for $pmux cell $procmux$1724: { $procmux$1006_CMP $auto$opt_reduce.cc:132:opt_mux$3433 }
    New ctrl vector for $pmux cell $procmux$1652: { $auto$opt_reduce.cc:132:opt_mux$3435 $procmux$1004_CMP }
    New ctrl vector for $pmux cell $procmux$1147: { $procmux$1023_CMP $auto$opt_reduce.cc:132:opt_mux$3437 }
    New ctrl vector for $pmux cell $procmux$1616: { $procmux$1035_CMP $auto$opt_reduce.cc:132:opt_mux$3439 }
    New ctrl vector for $pmux cell $procmux$571: { $procmux$1007_CMP $auto$opt_reduce.cc:132:opt_mux$3441 }
    New ctrl vector for $pmux cell $procmux$2732: { $procmux$1034_CMP $auto$opt_reduce.cc:132:opt_mux$3443 }
    New ctrl vector for $pmux cell $procmux$2300: { $procmux$1022_CMP $auto$opt_reduce.cc:132:opt_mux$3445 }
    New ctrl vector for $pmux cell $procmux$1976: { $procmux$1013_CMP $auto$opt_reduce.cc:132:opt_mux$3447 }
    New ctrl vector for $pmux cell $procmux$1075: { $procmux$1021_CMP $auto$opt_reduce.cc:132:opt_mux$3449 }
    New ctrl vector for $pmux cell $procmux$2156: { $procmux$1018_CMP $auto$opt_reduce.cc:132:opt_mux$3451 }
    New ctrl vector for $pmux cell $procmux$2408: { $procmux$1025_CMP $auto$opt_reduce.cc:132:opt_mux$3453 }
    New ctrl vector for $pmux cell $procmux$1003: { $procmux$1019_CMP $auto$opt_reduce.cc:132:opt_mux$3455 }
    New ctrl vector for $pmux cell $procmux$1327: { $procmux$1031_CMP $auto$opt_reduce.cc:132:opt_mux$3457 }
    New ctrl vector for $pmux cell $procmux$2120: { $procmux$1017_CMP $auto$opt_reduce.cc:132:opt_mux$3459 }
    New ctrl vector for $pmux cell $procmux$751: { $procmux$1012_CMP $auto$opt_reduce.cc:132:opt_mux$3461 }
    New ctrl vector for $pmux cell $procmux$2264: { $procmux$1021_CMP $auto$opt_reduce.cc:132:opt_mux$3463 }
    New ctrl vector for $pmux cell $procmux$895: { $procmux$1016_CMP $auto$opt_reduce.cc:132:opt_mux$3465 }
    New ctrl vector for $pmux cell $procmux$2624: { $procmux$1029_CMP $auto$opt_reduce.cc:132:opt_mux$3467 }
    New ctrl vector for $pmux cell $procmux$2588: { $procmux$1032_CMP $auto$opt_reduce.cc:132:opt_mux$3469 }
    New ctrl vector for $pmux cell $procmux$1868: { $procmux$1010_CMP $auto$opt_reduce.cc:132:opt_mux$3471 }
    New ctrl vector for $pmux cell $procmux$607: { $procmux$1008_CMP $auto$opt_reduce.cc:132:opt_mux$3473 }
    New ctrl vector for $pmux cell $procmux$931: { $procmux$1017_CMP $auto$opt_reduce.cc:132:opt_mux$3475 }
    New ctrl vector for $pmux cell $procmux$643: { $procmux$1009_CMP $auto$opt_reduce.cc:132:opt_mux$3477 }
    New ctrl vector for $pmux cell $procmux$463: { $auto$opt_reduce.cc:132:opt_mux$3479 $procmux$1004_CMP }
    New ctrl vector for $pmux cell $procmux$967: { $procmux$1018_CMP $auto$opt_reduce.cc:132:opt_mux$3481 }
    New ctrl vector for $pmux cell $procmux$679: { $procmux$1010_CMP $auto$opt_reduce.cc:132:opt_mux$3483 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3356: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3358: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3360: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3362: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3364: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3366: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3368: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3370: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3372: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3374: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3376: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3378: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3380: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3382: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3384: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3386: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3388: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3390: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3392: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3394: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3396: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3398: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3400: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3402: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3404: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3406: { $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3408: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3410: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3412: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3414: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3416: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3418: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3420: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3422: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3424: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3426: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3428: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3430: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3432: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3434: { $procmux$1007_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3436: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3438: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3440: { $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3442: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3444: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3446: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3448: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3450: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3452: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3454: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3456: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3458: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3460: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3462: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3464: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3466: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3468: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3470: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3472: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3474: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3476: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3478: { $procmux$1007_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3480: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1010_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3482: { $procmux$1007_CMP $procmux$1004_CMP $procmux$1005_CMP $procmux$1006_CMP $procmux$1008_CMP $procmux$1009_CMP $procmux$1011_CMP $procmux$1012_CMP $procmux$1013_CMP $procmux$1014_CMP $procmux$1015_CMP $procmux$1016_CMP $procmux$1017_CMP $procmux$1018_CMP $procmux$1019_CMP $procmux$1020_CMP $procmux$1021_CMP $procmux$1022_CMP $procmux$1023_CMP $procmux$1024_CMP $procmux$1025_CMP $procmux$1026_CMP $procmux$1027_CMP $procmux$1028_CMP $procmux$1029_CMP $procmux$1030_CMP $procmux$1031_CMP $procmux$1032_CMP $procmux$1033_CMP $procmux$1034_CMP $procmux$1035_CMP }
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
  Optimizing cells in module $paramod\ShiftLeftOne\ADDR_W=64.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \Control.
    New ctrl vector for $pmux cell $procmux$2956: { $auto$opt_reduce.cc:132:opt_mux$3485 $procmux$2945_CMP $procmux$2944_CMP $procmux$2943_CMP }
    New ctrl vector for $pmux cell $procmux$2942: { $procmux$2947_CMP $procmux$2946_CMP $procmux$2945_CMP $auto$opt_reduce.cc:132:opt_mux$3487 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3484: { $procmux$2946_CMP $procmux$2947_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$3486: { $procmux$2943_CMP $procmux$2944_CMP }
  Optimizing cells in module \Control.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \HazardDetectionUnit.
  Optimizing cells in module \cpu.
Performed a total of 134 changes.

13.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
<suppressed ~96 debug messages>
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 32 cells.

13.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3244 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3255 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3258 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3261 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3264 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3267 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3270 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3273 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3276 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3279 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3282 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3285 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3308 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3311 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3212 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3215 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3218 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3221 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3232 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3235 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3238 ($dlatch) from module cpu.
Removing $auto$proc_dlatch.cc:409:proc_dlatch$3241 ($dlatch) from module cpu.
Replaced 22 DFF cells.

13.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..
Removed 10 unused cells and 2193 unused wires.
<suppressed ~27 debug messages>

13.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.
<suppressed ~8 debug messages>

13.6.9. Rerunning OPT passes. (Maybe there is more to do..)

13.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ALU\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Adder\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ImmGen\INST_W=32\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\PCSrc\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\RegisterFile\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ShiftLeftOne\ADDR_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \HazardDetectionUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

13.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ALU\DATA_W=64.
  Optimizing cells in module $paramod\Adder\DATA_W=64.
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
  Optimizing cells in module $paramod\Mux\DATA_W=64.
  Optimizing cells in module $paramod\PCSrc\DATA_W=64.
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
  Optimizing cells in module $paramod\ShiftLeftOne\ADDR_W=64.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \Control.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \HazardDetectionUnit.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

13.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

13.6.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$3347 ($adff) from module cpu.
Removing $procdff$3350 ($adff) from module cpu.
Replaced 2 DFF cells.

13.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

13.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.6.16. Rerunning OPT passes. (Maybe there is more to do..)

13.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ALU\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Adder\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ImmGen\INST_W=32\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\PCSrc\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\RegisterFile\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ShiftLeftOne\ADDR_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \HazardDetectionUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

13.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ALU\DATA_W=64.
  Optimizing cells in module $paramod\Adder\DATA_W=64.
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
  Optimizing cells in module $paramod\Mux\DATA_W=64.
  Optimizing cells in module $paramod\PCSrc\DATA_W=64.
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
  Optimizing cells in module $paramod\ShiftLeftOne\ADDR_W=64.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \Control.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \HazardDetectionUnit.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

13.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

13.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.6.23. Finished OPT passes. (There is nothing left to do.)

13.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell $paramod\ALU\DATA_W=64.$procmux$2934_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell $paramod\ALU\DATA_W=64.$procmux$2935_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell $paramod\ALU\DATA_W=64.$procmux$2936_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell $paramod\ALU\DATA_W=64.$procmux$2937_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell $paramod\ALU\DATA_W=64.$procmux$2939_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell $paramod\ALU\DATA_W=64.$procmux$2940_CMP0 ($eq).
Removed top 19 bits (of 32) from port A of cell $paramod\Adder\DATA_W=64.$not$./codes/adder.v:13$225 ($not).
Removed top 31 bits (of 32) from port B of cell $paramod\Adder\DATA_W=64.$add$./codes/adder.v:13$226 ($add).
Removed top 19 bits (of 32) from port Y of cell $paramod\Adder\DATA_W=64.$add$./codes/adder.v:13$226 ($add).
Removed top 19 bits (of 32) from port A of cell $paramod\Adder\DATA_W=64.$add$./codes/adder.v:13$226 ($add).
Removed top 51 bits (of 64) from port B of cell $paramod\Adder\DATA_W=64.$sub$./codes/adder.v:14$227 ($sub).
Removed top 19 bits (of 32) from port Y of cell $paramod\Adder\DATA_W=64.$not$./codes/adder.v:13$225 ($not).
Removed top 19 bits (of 32) from wire $paramod\Adder\DATA_W=64.$not$./codes/adder.v:13$225_Y.
Removed top 2 bits (of 7) from port B of cell $paramod\ImmGen\INST_W=32\DATA_W=64.$procmux$2883_CMP0 ($eq).
Removed top 51 bits (of 64) from mux cell $paramod\ImmGen\INST_W=32\DATA_W=64.$procmux$2882 ($pmux).
Removed top 1 bits (of 7) from port B of cell $paramod\ImmGen\INST_W=32\DATA_W=64.$procmux$2885_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell $paramod\ImmGen\INST_W=32\DATA_W=64.$procmux$2886_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell $paramod\Mux\DATA_W=64.$procmux$3005_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$389_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$388_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$387_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$386_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$385_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$384_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$390_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$383_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$382_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$381_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$380_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$379_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$378_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$392_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$391_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$411_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$412_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$413_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$414_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$415_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$416_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$417_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$418_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$419_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$420_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$421_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$422_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$423_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$424_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$425_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1020_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1021_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1022_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1023_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1024_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1025_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1026_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1027_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1028_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1029_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1030_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1031_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1032_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1033_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell $paramod\RegisterFile\DATA_W=64.$procmux$1034_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell ALUControl.$eq$./codes/alu_control.v:13$36 ($eq).
Removed top 1 bits (of 4) from mux cell ALUControl.$procmux$2968 ($pmux).
Removed top 2 bits (of 3) from port B of cell ALUControl.$procmux$2970_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell ALUControl.$procmux$2985 ($mux).
Removed top 1 bits (of 4) from mux cell ALUControl.$procmux$2994 ($mux).
Removed top 1 bits (of 4) from wire ALUControl.$2\o_ALU_Optype[3:0].
Removed top 1 bits (of 4) from wire ALUControl.$3\o_ALU_Optype[3:0].
Removed top 1 bits (of 4) from wire ALUControl.$4\o_ALU_Optype[3:0].
Removed top 1 bits (of 7) from port B of cell Control.$procmux$2943_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell Control.$procmux$2944_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell Control.$procmux$2946_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell Control.$procmux$2947_CMP0 ($eq).
Removed top 1 bits (of 2) from mux cell ForwardingUnit.$procmux$2909 ($mux).
Removed top 1 bits (of 2) from mux cell ForwardingUnit.$procmux$2918 ($mux).
Removed top 1 bits (of 2) from wire ForwardingUnit.$2\o_ForwardA[1:0].
Removed top 1 bits (of 2) from wire ForwardingUnit.$2\o_ForwardB[1:0].

13.8. Executing PEEPOPT pass (run peephole optimizers).

13.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 7 unused wires.
<suppressed ~3 debug messages>

13.10. Executing TECHMAP pass (map to technology primitives).

13.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

13.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~896 debug messages>

13.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\ALU\DATA_W=64:
  creating $macc model for $add$./codes/alu.v:13$215 ($add).
  creating $macc model for $sub$./codes/alu.v:15$216 ($sub).
  creating $alu model for $macc $sub$./codes/alu.v:15$216.
  creating $alu model for $macc $add$./codes/alu.v:13$215.
  creating $alu cell for $add$./codes/alu.v:13$215: $auto$alumacc.cc:474:replace_alu$3494
  creating $alu cell for $sub$./codes/alu.v:15$216: $auto$alumacc.cc:474:replace_alu$3497
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Adder\DATA_W=64:
  creating $macc model for $add$./codes/adder.v:13$226 ($add).
  creating $macc model for $add$./codes/adder.v:17$228 ($add).
  creating $macc model for $sub$./codes/adder.v:14$227 ($sub).
  creating $alu model for $macc $sub$./codes/adder.v:14$227.
  creating $alu model for $macc $add$./codes/adder.v:17$228.
  creating $alu model for $macc $add$./codes/adder.v:13$226.
  creating $alu cell for $add$./codes/adder.v:13$226: $auto$alumacc.cc:474:replace_alu$3500
  creating $alu cell for $add$./codes/adder.v:17$228: $auto$alumacc.cc:474:replace_alu$3503
  creating $alu cell for $sub$./codes/adder.v:14$227: $auto$alumacc.cc:474:replace_alu$3506
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\ImmGen\INST_W=32\DATA_W=64:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Mux\DATA_W=64:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\PCSrc\DATA_W=64:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\RegisterFile\DATA_W=64:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\ShiftLeftOne\ADDR_W=64:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ALUControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ForwardingUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module HazardDetectionUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.

13.12. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module $paramod\ALU\DATA_W=64 that may be considered for resource sharing.
  Analyzing resource sharing options for $shr$./codes/alu.v:25$221 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$2934_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$./codes/alu.v:23$220 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$2935_CMP.
    No candidates found.

13.13. Executing OPT pass (performing simple optimizations).

13.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ALU\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Adder\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ImmGen\INST_W=32\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\PCSrc\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\RegisterFile\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ShiftLeftOne\ADDR_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \HazardDetectionUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

13.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ALU\DATA_W=64.
  Optimizing cells in module $paramod\Adder\DATA_W=64.
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
  Optimizing cells in module $paramod\Mux\DATA_W=64.
  Optimizing cells in module $paramod\PCSrc\DATA_W=64.
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
  Optimizing cells in module $paramod\ShiftLeftOne\ADDR_W=64.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \Control.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \HazardDetectionUnit.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

13.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.13.9. Finished OPT passes. (There is nothing left to do.)

13.14. Executing FSM pass (extract and optimize FSM).

13.14.1. Executing FSM_DETECT pass (finding FSMs in design).

13.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

13.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

13.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

13.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

13.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

13.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

13.15. Executing OPT pass (performing simple optimizations).

13.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.15.5. Finished fast OPT passes.

13.16. Executing MEMORY pass.

13.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

13.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

13.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

13.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.18. Executing OPT pass (performing simple optimizations).

13.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
<suppressed ~1 debug messages>
Optimizing module $paramod\PCSrc\DATA_W=64.
<suppressed ~3 debug messages>
Optimizing module $paramod\RegisterFile\DATA_W=64.
<suppressed ~66 debug messages>
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
<suppressed ~1 debug messages>
Optimizing module Control.
<suppressed ~1 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module HazardDetectionUnit.
<suppressed ~1 debug messages>
Optimizing module cpu.
<suppressed ~2 debug messages>

13.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..
Removed 5 unused cells and 11 unused wires.
<suppressed ~13 debug messages>

13.18.5. Finished fast OPT passes.

13.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

13.20. Executing OPT pass (performing simple optimizations).

13.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ALU\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Adder\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ImmGen\INST_W=32\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\PCSrc\DATA_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\RegisterFile\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ShiftLeftOne\ADDR_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \HazardDetectionUnit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

13.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ALU\DATA_W=64.
  Optimizing cells in module $paramod\Adder\DATA_W=64.
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
  Optimizing cells in module $paramod\Mux\DATA_W=64.
  Optimizing cells in module $paramod\PCSrc\DATA_W=64.
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
  Optimizing cells in module $paramod\ShiftLeftOne\ADDR_W=64.
  Optimizing cells in module \ALUControl.
    Consolidated identical input bits for $mux cell $procmux$3000:
      Old ports: A={ 1'0 $2\o_ALU_Optype[3:0] }, B=4'0010, Y=\o_ALU_Optype
      New ports: A=$2\o_ALU_Optype[3:0], B=3'010, Y=\o_ALU_Optype [2:0]
      New connections: \o_ALU_Optype [3] = 1'0
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \Control.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \HazardDetectionUnit.
  Optimizing cells in module \cpu.
Performed a total of 1 changes.

13.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

13.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.20.9. Rerunning OPT passes. (Maybe there is more to do..)

13.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ALU\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Adder\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ImmGen\INST_W=32\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\PCSrc\DATA_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\RegisterFile\DATA_W=64..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ShiftLeftOne\ADDR_W=64..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Control..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \HazardDetectionUnit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

13.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ALU\DATA_W=64.
  Optimizing cells in module $paramod\Adder\DATA_W=64.
  Optimizing cells in module $paramod\ImmGen\INST_W=32\DATA_W=64.
  Optimizing cells in module $paramod\Mux\DATA_W=64.
  Optimizing cells in module $paramod\PCSrc\DATA_W=64.
  Optimizing cells in module $paramod\RegisterFile\DATA_W=64.
  Optimizing cells in module $paramod\ShiftLeftOne\ADDR_W=64.
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \Control.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \HazardDetectionUnit.
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

13.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

13.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

13.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..

13.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
Optimizing module $paramod\Adder\DATA_W=64.
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.20.16. Finished OPT passes. (There is nothing left to do.)

13.21. Executing TECHMAP pass (map to technology primitives).

13.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

13.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=5 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_pmux\WIDTH=64\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=64\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:76114db6e1cd1c52616ff049b1a711809b9b6768$paramod$287c41139d0d42b7c5909a434205abfe2f2d17ea\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:76114db6e1cd1c52616ff049b1a711809b9b6768$paramod$0e6ea9abaac9e6ca87ba8f186d2acc93a7dd94f1\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=64\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_lcu\WIDTH=64 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=13\Y_WIDTH=13 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=64\B_WIDTH=13\Y_WIDTH=64 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=13 for cells of type $lcu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_pmux\WIDTH=13\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=64\S_WIDTH=31 for cells of type $pmux.
No more expansions possible.
<suppressed ~3946 debug messages>

13.22. Executing OPT pass (performing simple optimizations).

13.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
<suppressed ~149 debug messages>
Optimizing module $paramod\Adder\DATA_W=64.
<suppressed ~317 debug messages>
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
<suppressed ~22 debug messages>
Optimizing module $paramod\Mux\DATA_W=64.
<suppressed ~2 debug messages>
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
<suppressed ~353 debug messages>
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
<suppressed ~37 debug messages>
Optimizing module Control.
<suppressed ~57 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
<suppressed ~426 debug messages>
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
<suppressed ~51 debug messages>
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
<suppressed ~381 debug messages>
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
<suppressed ~3621 debug messages>
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
<suppressed ~27 debug messages>
Finding identical cells in module `\Control'.
<suppressed ~84 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 1532 cells.

13.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..
Removed 201 unused cells and 1877 unused wires.
<suppressed ~212 debug messages>

13.22.5. Finished fast OPT passes.

13.23. Executing ABC pass (technology mapping using ABC).

13.23.1. Extracting gate netlist of module `$paramod\ALU\DATA_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 2636 gates and 2770 wires to a netlist network with 132 inputs and 64 outputs.

13.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:            ANDNOT cells:      247
ABC RESULTS:              AOI3 cells:      207
ABC RESULTS:              AOI4 cells:       65
ABC RESULTS:               MUX cells:      578
ABC RESULTS:              NAND cells:       63
ABC RESULTS:               NOR cells:       94
ABC RESULTS:               NOT cells:      104
ABC RESULTS:              OAI3 cells:      106
ABC RESULTS:              OAI4 cells:      128
ABC RESULTS:                OR cells:       84
ABC RESULTS:             ORNOT cells:       63
ABC RESULTS:              XNOR cells:      107
ABC RESULTS:               XOR cells:      120
ABC RESULTS:        internal signals:     2574
ABC RESULTS:           input signals:      132
ABC RESULTS:          output signals:       64
Removing temp directory.

13.23.2. Extracting gate netlist of module `$paramod\Adder\DATA_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 1013 gates and 1142 wires to a netlist network with 128 inputs and 64 outputs.

13.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       88
ABC RESULTS:            ANDNOT cells:       99
ABC RESULTS:              AOI3 cells:       65
ABC RESULTS:               MUX cells:       64
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:       96
ABC RESULTS:               NOT cells:      129
ABC RESULTS:              OAI3 cells:       76
ABC RESULTS:                OR cells:       27
ABC RESULTS:             ORNOT cells:        5
ABC RESULTS:              XNOR cells:       89
ABC RESULTS:               XOR cells:      129
ABC RESULTS:        internal signals:      950
ABC RESULTS:           input signals:      128
ABC RESULTS:          output signals:       64
Removing temp directory.

13.23.3. Extracting gate netlist of module `$paramod\ImmGen\INST_W=32\DATA_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 124 wires to a netlist network with 24 inputs and 13 outputs.

13.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              AOI4 cells:       17
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:       16
ABC RESULTS:        internal signals:       87
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       13
Removing temp directory.

13.23.4. Extracting gate netlist of module `$paramod\Mux\DATA_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 394 gates and 653 wires to a netlist network with 258 inputs and 64 outputs.

13.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       65
ABC RESULTS:              AOI4 cells:       64
ABC RESULTS:               MUX cells:       64
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:       65
ABC RESULTS:        internal signals:      331
ABC RESULTS:           input signals:      258
ABC RESULTS:          output signals:       64
Removing temp directory.

13.23.5. Extracting gate netlist of module `$paramod\PCSrc\DATA_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 133 gates and 263 wires to a netlist network with 130 inputs and 1 outputs.

13.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.5.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:                OR cells:       57
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       64
ABC RESULTS:        internal signals:      132
ABC RESULTS:           input signals:      130
ABC RESULTS:          output signals:        1
Removing temp directory.

13.23.6. Extracting gate netlist of module `$paramod\RegisterFile\DATA_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 18571 gates and 20700 wires to a netlist network with 2128 inputs and 2176 outputs.

13.23.6.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:      211
ABC RESULTS:              AOI4 cells:      192
ABC RESULTS:               MUX cells:     6400
ABC RESULTS:              NAND cells:       62
ABC RESULTS:               NOR cells:       64
ABC RESULTS:               NOT cells:     3844
ABC RESULTS:              OAI3 cells:      192
ABC RESULTS:              OAI4 cells:     2688
ABC RESULTS:                OR cells:     2724
ABC RESULTS:             ORNOT cells:       85
ABC RESULTS:        internal signals:    16396
ABC RESULTS:           input signals:     2128
ABC RESULTS:          output signals:     2176
Removing temp directory.

13.23.7. Extracting gate netlist of module `$paramod\ShiftLeftOne\ADDR_W=64' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13.23.8. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 37 gates and 45 wires to a netlist network with 6 inputs and 3 outputs.

13.23.8.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.8.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        3
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:        internal signals:       36
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

13.23.9. Extracting gate netlist of module `\Control' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 51 wires to a netlist network with 7 inputs and 8 outputs.

13.23.9.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:              AOI3 cells:        2
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:        internal signals:       36
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        8
Removing temp directory.

13.23.10. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 60 gates and 83 wires to a netlist network with 22 inputs and 4 outputs.

13.23.10.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:               NOR cells:        5
ABC RESULTS:              OAI3 cells:        3
ABC RESULTS:                OR cells:       20
ABC RESULTS:               XOR cells:       20
ABC RESULTS:        internal signals:       57
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:        4
Removing temp directory.

13.23.11. Extracting gate netlist of module `\HazardDetectionUnit' to `<abc-temp-dir>/input.blif'..
Extracted 22 gates and 38 wires to a netlist network with 16 inputs and 1 outputs.

13.23.11.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.11.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:              AOI4 cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       21
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

13.23.12. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 129 gates and 228 wires to a netlist network with 97 inputs and 65 outputs.

13.23.12.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.23.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       64
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:       16
ABC RESULTS:                OR cells:       15
ABC RESULTS:        internal signals:       66
ABC RESULTS:           input signals:       97
ABC RESULTS:          output signals:       65
Removing temp directory.

13.24. Executing OPT pass (performing simple optimizations).

13.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ALU\DATA_W=64.
<suppressed ~226 debug messages>
Optimizing module $paramod\Adder\DATA_W=64.
<suppressed ~64 debug messages>
Optimizing module $paramod\ImmGen\INST_W=32\DATA_W=64.
Optimizing module $paramod\Mux\DATA_W=64.
Optimizing module $paramod\PCSrc\DATA_W=64.
Optimizing module $paramod\RegisterFile\DATA_W=64.
<suppressed ~2048 debug messages>
Optimizing module $paramod\ShiftLeftOne\ADDR_W=64.
Optimizing module ALUControl.
<suppressed ~2 debug messages>
Optimizing module Control.
Optimizing module ForwardingUnit.
Optimizing module HazardDetectionUnit.
Optimizing module cpu.

13.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ALU\DATA_W=64'.
<suppressed ~27 debug messages>
Finding identical cells in module `$paramod\Adder\DATA_W=64'.
<suppressed ~78 debug messages>
Finding identical cells in module `$paramod\ImmGen\INST_W=32\DATA_W=64'.
Finding identical cells in module `$paramod\Mux\DATA_W=64'.
Finding identical cells in module `$paramod\PCSrc\DATA_W=64'.
Finding identical cells in module `$paramod\RegisterFile\DATA_W=64'.
Finding identical cells in module `$paramod\ShiftLeftOne\ADDR_W=64'.
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\Control'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\HazardDetectionUnit'.
Finding identical cells in module `\cpu'.
Removed a total of 36 cells.

13.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

13.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ALU\DATA_W=64..
Finding unused cells or wires in module $paramod\Adder\DATA_W=64..
Finding unused cells or wires in module $paramod\ImmGen\INST_W=32\DATA_W=64..
Finding unused cells or wires in module $paramod\Mux\DATA_W=64..
Finding unused cells or wires in module $paramod\PCSrc\DATA_W=64..
Finding unused cells or wires in module $paramod\RegisterFile\DATA_W=64..
Finding unused cells or wires in module $paramod\ShiftLeftOne\ADDR_W=64..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \Control..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \HazardDetectionUnit..
Finding unused cells or wires in module \cpu..
Removed 6 unused cells and 7994 unused wires.
<suppressed ~17 debug messages>

13.24.5. Finished fast OPT passes.

13.25. Executing HIERARCHY pass (managing design hierarchy).

13.25.1. Analyzing design hierarchy..
Top module:  \cpu
Used module:     $paramod\Adder\DATA_W=64
Used module:     \Control
Used module:     $paramod\ImmGen\INST_W=32\DATA_W=64
Used module:     $paramod\Mux\DATA_W=64
Used module:     $paramod\PCSrc\DATA_W=64
Used module:     $paramod\RegisterFile\DATA_W=64
Used module:     $paramod\ShiftLeftOne\ADDR_W=64

13.25.2. Analyzing design hierarchy..
Top module:  \cpu
Used module:     $paramod\Adder\DATA_W=64
Used module:     \Control
Used module:     $paramod\ImmGen\INST_W=32\DATA_W=64
Used module:     $paramod\Mux\DATA_W=64
Used module:     $paramod\PCSrc\DATA_W=64
Used module:     $paramod\RegisterFile\DATA_W=64
Used module:     $paramod\ShiftLeftOne\ADDR_W=64
Removing unused module `$paramod\ALU\DATA_W=64'.
Removing unused module `\ALUControl'.
Removing unused module `\ForwardingUnit'.
Removing unused module `\HazardDetectionUnit'.
Removed 4 unused modules.

13.26. Printing statistics.

=== $paramod\PCSrc\DATA_W=64 ===

   Number of wires:                133
   Number of wire bits:            259
   Number of public wires:           5
   Number of public wire bits:     131
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                129
     $_ANDNOT_                       6
     $_ORNOT_                        1
     $_OR_                          57
     $_XNOR_                         1
     $_XOR_                         64

=== $paramod\RegisterFile\DATA_W=64 ===

   Number of wires:              14361
   Number of wire bits:          18625
   Number of public wires:          74
   Number of public wire bits:    4338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              18511
     $_ANDNOT_                     211
     $_AND_                          2
     $_AOI4_                       192
     $_DFF_PN0_                   2048
     $_MUX_                       6400
     $_NAND_                        62
     $_NOR_                         64
     $_NOT_                       3843
     $_OAI3_                       192
     $_OAI4_                      2688
     $_ORNOT_                       85
     $_OR_                        2724

=== $paramod\ShiftLeftOne\ADDR_W=64 ===

   Number of wires:                  2
   Number of wire bits:            128
   Number of public wires:           2
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== $paramod\Adder\DATA_W=64 ===

   Number of wires:                789
   Number of wire bits:            978
   Number of public wires:           3
   Number of public wire bits:     192
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                850
     $_ANDNOT_                      99
     $_AND_                         88
     $_AOI3_                        65
     $_MUX_                         64
     $_NAND_                        10
     $_NOR_                         72
     $_NOT_                        127
     $_OAI3_                        76
     $_ORNOT_                        5
     $_OR_                          27
     $_XNOR_                        89
     $_XOR_                        128

=== Control ===

   Number of wires:                 29
   Number of wire bits:             39
   Number of public wires:           5
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_ANDNOT_                       9
     $_AND_                          2
     $_AOI3_                         2
     $_AOI4_                         2
     $_NAND_                         1
     $_NOT_                          1
     $_ORNOT_                        8
     $_OR_                           6

=== $paramod\ImmGen\INST_W=32\DATA_W=64 ===

   Number of wires:                 42
   Number of wire bits:            142
   Number of public wires:           3
   Number of public wire bits:     103
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $_AND_                          1
     $_AOI3_                         2
     $_AOI4_                        17
     $_NAND_                         2
     $_NOR_                          2
     $_OAI3_                         6
     $_ORNOT_                       16
     $_OR_                           6

=== $paramod\Mux\DATA_W=64 ===

   Number of wires:                202
   Number of wire bits:            518
   Number of public wires:           6
   Number of public wire bits:     322
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                260
     $_ANDNOT_                      65
     $_AND_                          1
     $_AOI4_                        64
     $_MUX_                         64
     $_NOR_                          1
     $_ORNOT_                       65

=== cpu ===

   Number of wires:                101
   Number of wire bits:           2242
   Number of public wires:          70
   Number of public wire bits:    2211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                171
     $_ANDNOT_                       1
     $_AND_                         64
     $_DFF_PN0_                     66
     $_NAND_                        16
     $_OR_                          15
     $paramod\Adder\DATA_W=64        2
     $paramod\ImmGen\INST_W=32\DATA_W=64      1
     $paramod\Mux\DATA_W=64          2
     $paramod\PCSrc\DATA_W=64        1
     $paramod\RegisterFile\DATA_W=64      1
     $paramod\ShiftLeftOne\ADDR_W=64      1
     Control                         1

=== design hierarchy ===

   cpu                               1
     $paramod\Adder\DATA_W=64        2
     $paramod\ImmGen\INST_W=32\DATA_W=64      1
     $paramod\Mux\DATA_W=64          2
     $paramod\PCSrc\DATA_W=64        1
     $paramod\RegisterFile\DATA_W=64      1
     $paramod\ShiftLeftOne\ADDR_W=64      1
     Control                         1

   Number of wires:              16650
   Number of wire bits:          24427
   Number of public wires:         177
   Number of public wire bits:    7954
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              21105
     $_ANDNOT_                     555
     $_AND_                        247
     $_AOI3_                       134
     $_AOI4_                       339
     $_DFF_PN0_                   2114
     $_MUX_                       6656
     $_NAND_                       101
     $_NOR_                        212
     $_NOT_                       4098
     $_OAI3_                       350
     $_OAI4_                      2688
     $_ORNOT_                      250
     $_OR_                        2862
     $_XNOR_                       179
     $_XOR_                        320

13.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\PCSrc\DATA_W=64..
checking module $paramod\RegisterFile\DATA_W=64..
checking module $paramod\ShiftLeftOne\ADDR_W=64..
checking module $paramod\Adder\DATA_W=64..
checking module Control..
checking module $paramod\ImmGen\INST_W=32\DATA_W=64..
checking module $paramod\Mux\DATA_W=64..
checking module cpu..
found and reported 0 problems.

14. Executing FLATTEN pass (flatten design).
Using template $paramod\Adder\DATA_W=64 for cells of type $paramod\Adder\DATA_W=64.
Using template $paramod\Mux\DATA_W=64 for cells of type $paramod\Mux\DATA_W=64.
Using template $paramod\RegisterFile\DATA_W=64 for cells of type $paramod\RegisterFile\DATA_W=64.
Using template Control for cells of type Control.
Using template $paramod\PCSrc\DATA_W=64 for cells of type $paramod\PCSrc\DATA_W=64.
Using template $paramod\ImmGen\INST_W=32\DATA_W=64 for cells of type $paramod\ImmGen\INST_W=32\DATA_W=64.
Using template $paramod\ShiftLeftOne\ADDR_W=64 for cells of type $paramod\ShiftLeftOne\ADDR_W=64.
<suppressed ~9 debug messages>
No more expansions possible.
Deleting now unused module $paramod\PCSrc\DATA_W=64.
Deleting now unused module $paramod\RegisterFile\DATA_W=64.
Deleting now unused module $paramod\ShiftLeftOne\ADDR_W=64.
Deleting now unused module $paramod\Adder\DATA_W=64.
Deleting now unused module Control.
Deleting now unused module $paramod\ImmGen\INST_W=32\DATA_W=64.
Deleting now unused module $paramod\Mux\DATA_W=64.

15. Executing Verilog backend.
Dumping module `\cpu'.

16. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\cpu':
  mapped 2114 $_DFF_PN0_ cells to \DFFR_X1 cells.

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$59956: \IF_PC_r [7] -> $techmap\adderAddFour.$abc$37909$new_n283_
                                               \IF_PC_r [7] -> $techmap\adderAddFour.$abc$37909$new_n290_
                                               \IF_PC_r [7] -> $techmap\adderAddFour.$abc$37909$new_n297_
                                               \IF_PC_r [7] -> $techmap\adderAddFour.$abc$37909$new_n312_
                                               \IF_PC_r [7] -> $techmap\adderAddFour.$abc$37909$new_n313_
Breaking loop using new signal $abcloop$59957: \IF_PC_r [11] -> $techmap\adderAddFour.$abc$37909$new_n355_
                                               \IF_PC_r [11] -> $techmap\adderAddFour.$abc$37909$new_n362_
                                               \IF_PC_r [11] -> $techmap\adderAddFour.$abc$37909$new_n370_
                                               \IF_PC_r [11] -> $techmap\adderAddFour.$abc$37909$new_n383_
                                               \IF_PC_r [11] -> $techmap\adderAddFour.$abc$37909$new_n385_
Breaking loop using new signal $abcloop$59958: \IF_PC_r [13] -> $techmap\adderAddFour.$abc$37909$new_n394_
                                               \IF_PC_r [13] -> $techmap\adderAddFour.$abc$37909$new_n402_
                                               \IF_PC_r [13] -> $techmap\adderAddFour.$abc$37909$new_n407_
                                               \IF_PC_r [13] -> $techmap\adderAddFour.$abc$37909$new_n413_
                                               \IF_PC_r [13] -> $techmap\adderAddFour.$abc$37909$new_n414_
Breaking loop using new signal $abcloop$59959: \IF_PC_r [16] -> $techmap\adderAddFour.$abc$37909$new_n425_
                                               \IF_PC_r [16] -> $techmap\adderAddFour.$abc$37909$new_n447_
                                               \IF_PC_r [16] -> $techmap\adderAddFour.$abc$37909$new_n450_
                                               \IF_PC_r [16] -> $techmap\adderAddFour.$abc$37909$new_n454_
                                               \IF_PC_r [16] -> $techmap\adderAddFour.$abc$37909$new_n466_
Breaking loop using new signal $abcloop$59960: \IF_PC_r [28] -> $techmap\adderAddFour.$abc$37909$new_n588_
                                               \IF_PC_r [28] -> $techmap\adderAddFour.$abc$37909$new_n604_
                                               \IF_PC_r [28] -> $techmap\adderAddFour.$abc$37909$new_n607_
                                               \IF_PC_r [28] -> $techmap\adderAddFour.$abc$37909$new_n611_
                                               \IF_PC_r [28] -> $techmap\adderAddFour.$abc$37909$new_n623_
Breaking loop using new signal $abcloop$59961: \IF_PC_r [36] -> $techmap\adderAddFour.$abc$37909$new_n699_
                                               \IF_PC_r [36] -> $techmap\adderAddFour.$abc$37909$new_n715_
                                               \IF_PC_r [36] -> $techmap\adderAddFour.$abc$37909$new_n718_
                                               \IF_PC_r [36] -> $techmap\adderAddFour.$abc$37909$new_n722_
                                               \IF_PC_r [36] -> $techmap\adderAddFour.$abc$37909$new_n734_
Breaking loop using new signal $abcloop$59962: \IF_PC_r [40] -> $techmap\adderAddFour.$abc$37909$new_n747_
                                               \IF_PC_r [40] -> $techmap\adderAddFour.$abc$37909$new_n771_
                                               \IF_PC_r [40] -> $techmap\adderAddFour.$abc$37909$new_n774_
                                               \IF_PC_r [40] -> $techmap\adderAddFour.$abc$37909$new_n777_
                                               \IF_PC_r [40] -> $techmap\adderAddFour.$abc$37909$new_n790_
Breaking loop using new signal $abcloop$59963: \IF_PC_r [48] -> $techmap\adderAddFour.$abc$37909$new_n855_
                                               \IF_PC_r [48] -> $techmap\adderAddFour.$abc$37909$new_n881_
                                               \IF_PC_r [48] -> $techmap\adderAddFour.$abc$37909$new_n886_
                                               \IF_PC_r [48] -> $techmap\adderAddFour.$abc$37909$new_n889_
                                               \IF_PC_r [48] -> $techmap\adderAddFour.$abc$37909$new_n901_
Breaking loop using new signal $abcloop$59964: \IF_PC_r [60] -> $techmap\adderAddFour.$abc$37909$new_n1023_
                                               \IF_PC_r [60] -> $techmap\adderAddFour.$abc$37909$new_n1038_
                                               \IF_PC_r [60] -> $techmap\adderAddFour.$abc$37909$new_n1041_
                                               \IF_PC_r [60] -> $techmap\adderAddFour.$abc$37909$new_n1045_
                                               \IF_PC_r [60] -> $techmap\adderAddFour.$abc$37909$new_n1057_
Breaking loop using new signal $abcloop$59965: \IF_PC_r [2] -> $techmap\adderAddFour.$abc$37909$new_n206_
                                               \IF_PC_r [2] -> $techmap\adderAddFour.$abc$37909$new_n212_
                                               \IF_PC_r [2] -> $techmap\adderAddFour.$abc$37909$new_n219_
                                               \IF_PC_r [2] -> $techmap\adderAddFour.$abc$37909$new_n226_
Breaking loop using new signal $abcloop$59966: \IF_PC_r [3] -> $techmap\adderAddFour.$abc$37909$new_n218_
                                               \IF_PC_r [3] -> $techmap\adderAddFour.$abc$37909$new_n225_
                                               \IF_PC_r [3] -> $techmap\adderAddFour.$abc$37909$new_n233_
                                               \IF_PC_r [3] -> $techmap\adderAddFour.$abc$37909$new_n243_
Breaking loop using new signal $abcloop$59967: \IF_PC_r [4] -> $techmap\adderAddFour.$abc$37909$new_n231_
                                               \IF_PC_r [4] -> $techmap\adderAddFour.$abc$37909$new_n241_
                                               \IF_PC_r [4] -> $techmap\adderAddFour.$abc$37909$new_n252_
                                               \IF_PC_r [4] -> $techmap\adderAddFour.$abc$37909$new_n259_
Breaking loop using new signal $abcloop$59968: \IF_PC_r [5] -> $techmap\adderAddFour.$abc$37909$new_n251_
                                               \IF_PC_r [5] -> $techmap\adderAddFour.$abc$37909$new_n258_
                                               \IF_PC_r [5] -> $techmap\adderAddFour.$abc$37909$new_n265_
                                               \IF_PC_r [5] -> $techmap\adderAddFour.$abc$37909$new_n276_
Breaking loop using new signal $abcloop$59969: \IF_PC_r [6] -> $techmap\adderAddFour.$abc$37909$new_n264_
                                               \IF_PC_r [6] -> $techmap\adderAddFour.$abc$37909$new_n275_
                                               \IF_PC_r [6] -> $techmap\adderAddFour.$abc$37909$new_n284_
                                               \IF_PC_r [6] -> $techmap\adderAddFour.$abc$37909$new_n291_
Breaking loop using new signal $abcloop$59970: \IF_PC_r [8] -> $techmap\adderAddFour.$abc$37909$new_n295_
                                               \IF_PC_r [8] -> $techmap\adderAddFour.$abc$37909$new_n309_
                                               \IF_PC_r [8] -> $techmap\adderAddFour.$abc$37909$new_n324_
                                               \IF_PC_r [8] -> $techmap\adderAddFour.$abc$37909$new_n331_
Breaking loop using new signal $abcloop$59971: \IF_PC_r [9] -> $techmap\adderAddFour.$abc$37909$new_n323_
                                               \IF_PC_r [9] -> $techmap\adderAddFour.$abc$37909$new_n330_
                                               \IF_PC_r [9] -> $techmap\adderAddFour.$abc$37909$new_n337_
                                               \IF_PC_r [9] -> $techmap\adderAddFour.$abc$37909$new_n348_
Breaking loop using new signal $abcloop$59972: \IF_PC_r [10] -> $techmap\adderAddFour.$abc$37909$new_n336_
                                               \IF_PC_r [10] -> $techmap\adderAddFour.$abc$37909$new_n347_
                                               \IF_PC_r [10] -> $techmap\adderAddFour.$abc$37909$new_n356_
                                               \IF_PC_r [10] -> $techmap\adderAddFour.$abc$37909$new_n363_
Breaking loop using new signal $abcloop$59973: \IF_PC_r [14] -> $techmap\adderAddFour.$abc$37909$new_n404_
                                               \IF_PC_r [14] -> $techmap\adderAddFour.$abc$37909$new_n412_
                                               \IF_PC_r [14] -> $techmap\adderAddFour.$abc$37909$new_n419_
                                               \IF_PC_r [14] -> $techmap\adderAddFour.$abc$37909$new_n438_
Breaking loop using new signal $abcloop$59974: \IF_PC_r [15] -> $techmap\adderAddFour.$abc$37909$new_n418_
                                               \IF_PC_r [15] -> $techmap\adderAddFour.$abc$37909$new_n423_
                                               \IF_PC_r [15] -> $techmap\adderAddFour.$abc$37909$new_n427_
                                               \IF_PC_r [15] -> $techmap\adderAddFour.$abc$37909$new_n438_
Breaking loop using new signal $abcloop$59975: \IF_PC_r [17] -> $techmap\adderAddFour.$abc$37909$new_n449_
                                               \IF_PC_r [17] -> $techmap\adderAddFour.$abc$37909$new_n455_
                                               \IF_PC_r [17] -> $techmap\adderAddFour.$abc$37909$new_n458_
                                               \IF_PC_r [17] -> $techmap\adderAddFour.$abc$37909$new_n466_
Breaking loop using new signal $abcloop$59976: \IF_PC_r [18] -> $techmap\adderAddFour.$abc$37909$new_n457_
                                               \IF_PC_r [18] -> $techmap\adderAddFour.$abc$37909$new_n465_
                                               \IF_PC_r [18] -> $techmap\adderAddFour.$abc$37909$new_n473_
                                               \IF_PC_r [18] -> $techmap\adderAddFour.$abc$37909$new_n491_
Breaking loop using new signal $abcloop$59977: \IF_PC_r [19] -> $techmap\adderAddFour.$abc$37909$new_n472_
                                               \IF_PC_r [19] -> $techmap\adderAddFour.$abc$37909$new_n478_
                                               \IF_PC_r [19] -> $techmap\adderAddFour.$abc$37909$new_n483_
                                               \IF_PC_r [19] -> $techmap\adderAddFour.$abc$37909$new_n491_
Breaking loop using new signal $abcloop$59978: \IF_PC_r [20] -> $techmap\adderAddFour.$abc$37909$new_n480_
                                               \IF_PC_r [20] -> $techmap\adderAddFour.$abc$37909$new_n490_
                                               \IF_PC_r [20] -> $techmap\adderAddFour.$abc$37909$new_n501_
                                               \IF_PC_r [20] -> $techmap\adderAddFour.$abc$37909$new_n517_
Breaking loop using new signal $abcloop$59979: \IF_PC_r [21] -> $techmap\adderAddFour.$abc$37909$new_n500_
                                               \IF_PC_r [21] -> $techmap\adderAddFour.$abc$37909$new_n506_
                                               \IF_PC_r [21] -> $techmap\adderAddFour.$abc$37909$new_n511_
                                               \IF_PC_r [21] -> $techmap\adderAddFour.$abc$37909$new_n517_
Breaking loop using new signal $abcloop$59980: \IF_PC_r [22] -> $techmap\adderAddFour.$abc$37909$new_n508_
                                               \IF_PC_r [22] -> $techmap\adderAddFour.$abc$37909$new_n516_
                                               \IF_PC_r [22] -> $techmap\adderAddFour.$abc$37909$new_n524_
                                               \IF_PC_r [22] -> $techmap\adderAddFour.$abc$37909$new_n545_
Breaking loop using new signal $abcloop$59981: \IF_PC_r [23] -> $techmap\adderAddFour.$abc$37909$new_n523_
                                               \IF_PC_r [23] -> $techmap\adderAddFour.$abc$37909$new_n528_
                                               \IF_PC_r [23] -> $techmap\adderAddFour.$abc$37909$new_n533_
                                               \IF_PC_r [23] -> $techmap\adderAddFour.$abc$37909$new_n545_
Breaking loop using new signal $abcloop$59982: \IF_PC_r [24] -> $techmap\adderAddFour.$abc$37909$new_n530_
                                               \IF_PC_r [24] -> $techmap\adderAddFour.$abc$37909$new_n544_
                                               \IF_PC_r [24] -> $techmap\adderAddFour.$abc$37909$new_n558_
                                               \IF_PC_r [24] -> $techmap\adderAddFour.$abc$37909$new_n574_
Breaking loop using new signal $abcloop$59983: \IF_PC_r [25] -> $techmap\adderAddFour.$abc$37909$new_n557_
                                               \IF_PC_r [25] -> $techmap\adderAddFour.$abc$37909$new_n562_
                                               \IF_PC_r [25] -> $techmap\adderAddFour.$abc$37909$new_n565_
                                               \IF_PC_r [25] -> $techmap\adderAddFour.$abc$37909$new_n574_
Breaking loop using new signal $abcloop$59984: \IF_PC_r [26] -> $techmap\adderAddFour.$abc$37909$new_n564_
                                               \IF_PC_r [26] -> $techmap\adderAddFour.$abc$37909$new_n572_
                                               \IF_PC_r [26] -> $techmap\adderAddFour.$abc$37909$new_n581_
                                               \IF_PC_r [26] -> $techmap\adderAddFour.$abc$37909$new_n598_
Breaking loop using new signal $abcloop$59985: \IF_PC_r [27] -> $techmap\adderAddFour.$abc$37909$new_n580_
                                               \IF_PC_r [27] -> $techmap\adderAddFour.$abc$37909$new_n586_
                                               \IF_PC_r [27] -> $techmap\adderAddFour.$abc$37909$new_n590_
                                               \IF_PC_r [27] -> $techmap\adderAddFour.$abc$37909$new_n598_
Breaking loop using new signal $abcloop$59986: \IF_PC_r [29] -> $techmap\adderAddFour.$abc$37909$new_n606_
                                               \IF_PC_r [29] -> $techmap\adderAddFour.$abc$37909$new_n612_
                                               \IF_PC_r [29] -> $techmap\adderAddFour.$abc$37909$new_n617_
                                               \IF_PC_r [29] -> $techmap\adderAddFour.$abc$37909$new_n623_
Breaking loop using new signal $abcloop$59987: \IF_PC_r [30] -> $techmap\adderAddFour.$abc$37909$new_n614_
                                               \IF_PC_r [30] -> $techmap\adderAddFour.$abc$37909$new_n622_
                                               \IF_PC_r [30] -> $techmap\adderAddFour.$abc$37909$new_n630_
                                               \IF_PC_r [30] -> $techmap\adderAddFour.$abc$37909$new_n653_
Breaking loop using new signal $abcloop$59988: \IF_PC_r [31] -> $techmap\adderAddFour.$abc$37909$new_n629_
                                               \IF_PC_r [31] -> $techmap\adderAddFour.$abc$37909$new_n634_
                                               \IF_PC_r [31] -> $techmap\adderAddFour.$abc$37909$new_n638_
                                               \IF_PC_r [31] -> $techmap\adderAddFour.$abc$37909$new_n653_
Breaking loop using new signal $abcloop$59989: \IF_PC_r [32] -> $techmap\adderAddFour.$abc$37909$new_n636_
                                               \IF_PC_r [32] -> $techmap\adderAddFour.$abc$37909$new_n652_
                                               \IF_PC_r [32] -> $techmap\adderAddFour.$abc$37909$new_n669_
                                               \IF_PC_r [32] -> $techmap\adderAddFour.$abc$37909$new_n686_
Breaking loop using new signal $abcloop$59990: \IF_PC_r [33] -> $techmap\adderAddFour.$abc$37909$new_n668_
                                               \IF_PC_r [33] -> $techmap\adderAddFour.$abc$37909$new_n674_
                                               \IF_PC_r [33] -> $techmap\adderAddFour.$abc$37909$new_n679_
                                               \IF_PC_r [33] -> $techmap\adderAddFour.$abc$37909$new_n686_
Breaking loop using new signal $abcloop$59991: \IF_PC_r [34] -> $techmap\adderAddFour.$abc$37909$new_n676_
                                               \IF_PC_r [34] -> $techmap\adderAddFour.$abc$37909$new_n684_
                                               \IF_PC_r [34] -> $techmap\adderAddFour.$abc$37909$new_n693_
                                               \IF_PC_r [34] -> $techmap\adderAddFour.$abc$37909$new_n709_
Breaking loop using new signal $abcloop$59992: \IF_PC_r [35] -> $techmap\adderAddFour.$abc$37909$new_n692_
                                               \IF_PC_r [35] -> $techmap\adderAddFour.$abc$37909$new_n697_
                                               \IF_PC_r [35] -> $techmap\adderAddFour.$abc$37909$new_n701_
                                               \IF_PC_r [35] -> $techmap\adderAddFour.$abc$37909$new_n709_
Breaking loop using new signal $abcloop$59993: \IF_PC_r [37] -> $techmap\adderAddFour.$abc$37909$new_n717_
                                               \IF_PC_r [37] -> $techmap\adderAddFour.$abc$37909$new_n723_
                                               \IF_PC_r [37] -> $techmap\adderAddFour.$abc$37909$new_n728_
                                               \IF_PC_r [37] -> $techmap\adderAddFour.$abc$37909$new_n734_
Breaking loop using new signal $abcloop$59994: \IF_PC_r [38] -> $techmap\adderAddFour.$abc$37909$new_n725_
                                               \IF_PC_r [38] -> $techmap\adderAddFour.$abc$37909$new_n733_
                                               \IF_PC_r [38] -> $techmap\adderAddFour.$abc$37909$new_n741_
                                               \IF_PC_r [38] -> $techmap\adderAddFour.$abc$37909$new_n761_
Breaking loop using new signal $abcloop$59995: \IF_PC_r [39] -> $techmap\adderAddFour.$abc$37909$new_n740_
                                               \IF_PC_r [39] -> $techmap\adderAddFour.$abc$37909$new_n745_
                                               \IF_PC_r [39] -> $techmap\adderAddFour.$abc$37909$new_n750_
                                               \IF_PC_r [39] -> $techmap\adderAddFour.$abc$37909$new_n761_
Breaking loop using new signal $abcloop$59996: \IF_PC_r [41] -> $techmap\adderAddFour.$abc$37909$new_n773_
                                               \IF_PC_r [41] -> $techmap\adderAddFour.$abc$37909$new_n778_
                                               \IF_PC_r [41] -> $techmap\adderAddFour.$abc$37909$new_n784_
                                               \IF_PC_r [41] -> $techmap\adderAddFour.$abc$37909$new_n790_
Breaking loop using new signal $abcloop$59997: \IF_PC_r [42] -> $techmap\adderAddFour.$abc$37909$new_n780_
                                               \IF_PC_r [42] -> $techmap\adderAddFour.$abc$37909$new_n789_
                                               \IF_PC_r [42] -> $techmap\adderAddFour.$abc$37909$new_n797_
                                               \IF_PC_r [42] -> $techmap\adderAddFour.$abc$37909$new_n815_
Breaking loop using new signal $abcloop$59998: \IF_PC_r [43] -> $techmap\adderAddFour.$abc$37909$new_n796_
                                               \IF_PC_r [43] -> $techmap\adderAddFour.$abc$37909$new_n801_
                                               \IF_PC_r [43] -> $techmap\adderAddFour.$abc$37909$new_n805_
                                               \IF_PC_r [43] -> $techmap\adderAddFour.$abc$37909$new_n815_
Breaking loop using new signal $abcloop$59999: \IF_PC_r [44] -> $techmap\adderAddFour.$abc$37909$new_n803_
                                               \IF_PC_r [44] -> $techmap\adderAddFour.$abc$37909$new_n814_
                                               \IF_PC_r [44] -> $techmap\adderAddFour.$abc$37909$new_n826_
                                               \IF_PC_r [44] -> $techmap\adderAddFour.$abc$37909$new_n842_
Breaking loop using new signal $abcloop$60000: \IF_PC_r [45] -> $techmap\adderAddFour.$abc$37909$new_n825_
                                               \IF_PC_r [45] -> $techmap\adderAddFour.$abc$37909$new_n831_
                                               \IF_PC_r [45] -> $techmap\adderAddFour.$abc$37909$new_n836_
                                               \IF_PC_r [45] -> $techmap\adderAddFour.$abc$37909$new_n842_
Breaking loop using new signal $abcloop$60001: \IF_PC_r [46] -> $techmap\adderAddFour.$abc$37909$new_n833_
                                               \IF_PC_r [46] -> $techmap\adderAddFour.$abc$37909$new_n841_
                                               \IF_PC_r [46] -> $techmap\adderAddFour.$abc$37909$new_n849_
                                               \IF_PC_r [46] -> $techmap\adderAddFour.$abc$37909$new_n870_
Breaking loop using new signal $abcloop$60002: \IF_PC_r [47] -> $techmap\adderAddFour.$abc$37909$new_n848_
                                               \IF_PC_r [47] -> $techmap\adderAddFour.$abc$37909$new_n853_
                                               \IF_PC_r [47] -> $techmap\adderAddFour.$abc$37909$new_n857_
                                               \IF_PC_r [47] -> $techmap\adderAddFour.$abc$37909$new_n870_
Breaking loop using new signal $abcloop$60003: \IF_PC_r [49] -> $techmap\adderAddFour.$abc$37909$new_n883_
                                               \IF_PC_r [49] -> $techmap\adderAddFour.$abc$37909$new_n890_
                                               \IF_PC_r [49] -> $techmap\adderAddFour.$abc$37909$new_n895_
                                               \IF_PC_r [49] -> $techmap\adderAddFour.$abc$37909$new_n901_
Breaking loop using new signal $abcloop$60004: \IF_PC_r [50] -> $techmap\adderAddFour.$abc$37909$new_n892_
                                               \IF_PC_r [50] -> $techmap\adderAddFour.$abc$37909$new_n900_
                                               \IF_PC_r [50] -> $techmap\adderAddFour.$abc$37909$new_n908_
                                               \IF_PC_r [50] -> $techmap\adderAddFour.$abc$37909$new_n924_
Breaking loop using new signal $abcloop$60005: \IF_PC_r [51] -> $techmap\adderAddFour.$abc$37909$new_n907_
                                               \IF_PC_r [51] -> $techmap\adderAddFour.$abc$37909$new_n912_
                                               \IF_PC_r [51] -> $techmap\adderAddFour.$abc$37909$new_n916_
                                               \IF_PC_r [51] -> $techmap\adderAddFour.$abc$37909$new_n924_
Breaking loop using new signal $abcloop$60006: \IF_PC_r [52] -> $techmap\adderAddFour.$abc$37909$new_n914_
                                               \IF_PC_r [52] -> $techmap\adderAddFour.$abc$37909$new_n923_
                                               \IF_PC_r [52] -> $techmap\adderAddFour.$abc$37909$new_n935_
                                               \IF_PC_r [52] -> $techmap\adderAddFour.$abc$37909$new_n951_
Breaking loop using new signal $abcloop$60007: \IF_PC_r [53] -> $techmap\adderAddFour.$abc$37909$new_n934_
                                               \IF_PC_r [53] -> $techmap\adderAddFour.$abc$37909$new_n940_
                                               \IF_PC_r [53] -> $techmap\adderAddFour.$abc$37909$new_n945_
                                               \IF_PC_r [53] -> $techmap\adderAddFour.$abc$37909$new_n951_
Breaking loop using new signal $abcloop$60008: \IF_PC_r [54] -> $techmap\adderAddFour.$abc$37909$new_n942_
                                               \IF_PC_r [54] -> $techmap\adderAddFour.$abc$37909$new_n950_
                                               \IF_PC_r [54] -> $techmap\adderAddFour.$abc$37909$new_n958_
                                               \IF_PC_r [54] -> $techmap\adderAddFour.$abc$37909$new_n978_
Breaking loop using new signal $abcloop$60009: \IF_PC_r [55] -> $techmap\adderAddFour.$abc$37909$new_n957_
                                               \IF_PC_r [55] -> $techmap\adderAddFour.$abc$37909$new_n962_
                                               \IF_PC_r [55] -> $techmap\adderAddFour.$abc$37909$new_n966_
                                               \IF_PC_r [55] -> $techmap\adderAddFour.$abc$37909$new_n978_
Breaking loop using new signal $abcloop$60010: \IF_PC_r [56] -> $techmap\adderAddFour.$abc$37909$new_n964_
                                               \IF_PC_r [56] -> $techmap\adderAddFour.$abc$37909$new_n977_
                                               \IF_PC_r [56] -> $techmap\adderAddFour.$abc$37909$new_n993_
                                               \IF_PC_r [56] -> $techmap\adderAddFour.$abc$37909$new_n1008_
Breaking loop using new signal $abcloop$60011: \IF_PC_r [57] -> $techmap\adderAddFour.$abc$37909$new_n989_
                                               \IF_PC_r [57] -> $techmap\adderAddFour.$abc$37909$new_n997_
                                               \IF_PC_r [57] -> $techmap\adderAddFour.$abc$37909$new_n1002_
                                               \IF_PC_r [57] -> $techmap\adderAddFour.$abc$37909$new_n1008_
Breaking loop using new signal $abcloop$60012: \IF_PC_r [58] -> $techmap\adderAddFour.$abc$37909$new_n999_
                                               \IF_PC_r [58] -> $techmap\adderAddFour.$abc$37909$new_n1007_
                                               \IF_PC_r [58] -> $techmap\adderAddFour.$abc$37909$new_n1017_
                                               \IF_PC_r [58] -> $techmap\adderAddFour.$abc$37909$new_n1032_
Breaking loop using new signal $abcloop$60013: \IF_PC_r [59] -> $techmap\adderAddFour.$abc$37909$new_n1016_
                                               \IF_PC_r [59] -> $techmap\adderAddFour.$abc$37909$new_n1021_
                                               \IF_PC_r [59] -> $techmap\adderAddFour.$abc$37909$new_n1025_
                                               \IF_PC_r [59] -> $techmap\adderAddFour.$abc$37909$new_n1032_
Breaking loop using new signal $abcloop$60014: \IF_PC_r [61] -> $techmap\adderAddFour.$abc$37909$new_n1040_
                                               \IF_PC_r [61] -> $techmap\adderAddFour.$abc$37909$new_n1046_
                                               \IF_PC_r [61] -> $techmap\adderAddFour.$abc$37909$new_n1051_
                                               \IF_PC_r [61] -> $techmap\adderAddFour.$abc$37909$new_n1057_
Breaking loop using new signal $abcloop$60015: \IF_PC_r [1] -> $techmap\adderAddFour.$abc$37909$new_n198_
                                               \IF_PC_r [1] -> $techmap\adderAddFour.$abc$37909$new_n200_
                                               \IF_PC_r [1] -> $techmap\adderAddFour.$abc$37909$new_n208_
Breaking loop using new signal $abcloop$60016: \IF_PC_r [12] -> $techmap\adderAddFour.$abc$37909$new_n367_
                                               \IF_PC_r [12] -> $techmap\adderAddFour.$abc$37909$new_n377_
                                               \IF_PC_r [12] -> $techmap\adderAddFour.$abc$37909$new_n395_
Breaking loop using new signal $abcloop$60017: \IF_PC_r [62] -> $techmap\adderAddFour.$abc$37909$new_n1048_
                                               \IF_PC_r [62] -> $techmap\adderAddFour.$abc$37909$new_n1056_
                                               \IF_PC_r [62] -> $techmap\adderAddFour.$abc$37909$new_n1064_
Breaking loop using new signal $abcloop$60018: \IF_PC_r [0] -> $techmap\adderAddFour.$abc$37909$new_n194_
                                               \IF_PC_r [0] -> $techmap\adderAddFour.$abc$37909$new_n197_
                                               \IF_PC_r [0] -> $techmap\adderAddFour.$abc$37909$new_n203_
Breaking loop using new signal $abcloop$60019: \IF_PC_r [63] -> $techmap\adderAddFour.$abc$37909$new_n1063_
                                               \IF_PC_r [63] -> $techmap\adderAddFour.$abc$37909$new_n1068_
Extracted 18991 gates and 23059 wires to a netlist network with 4065 inputs and 2177 outputs.

17.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/chei/Documents/archi/hw4/stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "WELLTAP_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/chei/Documents/archi/hw4/stdcells.lib" has 90 cells (27 skipped: 13 seq; 6 tri-state; 8 no func; 10 dont_use).  Time =     0.06 sec
ABC: Memory =    8.88 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + read_constr -v /home/chei/Documents/archi/hw4/cpu.constr 
ABC: Setting driving cell to be "BUF_X2".
ABC: Setting output load to be 0.010000.
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -D 1000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 1000 
ABC: + &put 
ABC: + buffer 
ABC: + upsize -D 1000 
ABC: + dnsize -D 1000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   2281 ( 91.4 %)   Cap =  0.7 ff (  0.6 %)   Area =     1463.00 ( 99.1 %)   Delay =  1411.47 ps  (  1.4 %)               
ABC: Path  0 --    4012 : 0    4 pi       A =   0.00  Df =  11.6   -3.5 ps  S =  13.2 ps  Cin =  0.0 ff  Cout =   8.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    6257 : 4    4 AND4_X4  A =   3.46  Df =  67.3  -24.4 ps  S =  14.4 ps  Cin =  3.3 ff  Cout =  11.8 ff  Cmax = 241.1 ff  G =  343  
ABC: Path  2 --    6266 : 4    3 NAND4_X4 A =   4.79  Df = 102.6  -34.5 ps  S =  18.2 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path  3 --    6275 : 4    5 NOR4_X4  A =   4.79  Df = 204.3 -119.5 ps  S =  57.7 ps  Cin =  5.8 ff  Cout =  12.8 ff  Cmax =  41.5 ff  G =  210  
ABC: Path  4 --    6288 : 4    3 NAND4_X4 A =   4.79  Df = 244.1 -132.9 ps  S =  20.3 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path  5 --    6297 : 4    5 NOR4_X4  A =   4.79  Df = 346.4 -218.5 ps  S =  57.7 ps  Cin =  5.8 ff  Cout =  12.8 ff  Cmax =  41.5 ff  G =  210  
ABC: Path  6 --    6309 : 4    3 NAND4_X4 A =   4.79  Df = 386.2 -232.3 ps  S =  20.3 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path  7 --    6319 : 4    5 NOR4_X4  A =   4.79  Df = 488.4 -317.9 ps  S =  57.7 ps  Cin =  5.8 ff  Cout =  12.8 ff  Cmax =  41.5 ff  G =  210  
ABC: Path  8 --    6331 : 4    3 NAND4_X4 A =   4.79  Df = 528.3 -331.6 ps  S =  20.3 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path  9 --    6340 : 4    4 NOR4_X4  A =   4.79  Df = 626.1 -413.3 ps  S =  53.7 ps  Cin =  5.8 ff  Cout =  11.1 ff  Cmax =  41.5 ff  G =  184  
ABC: Path 10 --    6353 : 4    3 NAND4_X4 A =   4.79  Df = 665.6 -427.0 ps  S =  20.1 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path 11 --    6363 : 4    4 NOR4_X4  A =   4.79  Df = 763.2 -508.3 ps  S =  53.6 ps  Cin =  5.8 ff  Cout =  11.1 ff  Cmax =  41.5 ff  G =  184  
ABC: Path 12 --    6374 : 4    3 NAND4_X4 A =   4.79  Df = 802.8 -521.9 ps  S =  20.1 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path 13 --    6383 : 4    4 NOR4_X4  A =   4.79  Df = 900.5 -603.5 ps  S =  53.7 ps  Cin =  5.8 ff  Cout =  11.1 ff  Cmax =  41.5 ff  G =  184  
ABC: Path 14 --    6396 : 4    3 NAND4_X4 A =   4.79  Df = 940.0 -617.2 ps  S =  20.1 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path 15 --    6405 : 4    4 NOR4_X4  A =   4.79  Df =1037.8 -698.8 ps  S =  53.7 ps  Cin =  5.8 ff  Cout =  11.1 ff  Cmax =  41.5 ff  G =  184  
ABC: Path 16 --    6417 : 4    3 NAND4_X4 A =   4.79  Df =1077.3 -712.4 ps  S =  20.1 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path 17 --    6427 : 4    4 NOR4_X4  A =   4.79  Df =1175.0 -794.0 ps  S =  53.7 ps  Cin =  5.8 ff  Cout =  11.1 ff  Cmax =  41.5 ff  G =  184  
ABC: Path 18 --    6439 : 4    3 NAND4_X4 A =   4.79  Df =1214.6 -807.7 ps  S =  20.1 ps  Cin =  5.7 ff  Cout =  10.3 ff  Cmax = 222.8 ff  G =  174  
ABC: Path 19 --    6448 : 4    5 NOR4_X4  A =   4.79  Df =1306.6 -884.4 ps  S =  48.7 ps  Cin =  5.8 ff  Cout =   9.1 ff  Cmax =  41.5 ff  G =  149  
ABC: Path 20 --    6460 : 4    1 NAND4_X1 A =   1.33  Df =1344.2 -896.8 ps  S =  19.6 ps  Cin =  1.6 ff  Cout =   2.6 ff  Cmax =  56.0 ff  G =  158  
ABC: Path 21 --    6461 : 2    2 XNOR2_X1 A =   1.60  Df =1383.7 -896.1 ps  S =  15.7 ps  Cin =  2.3 ff  Cout =   1.0 ff  Cmax =  26.0 ff  G =   40  
ABC: Path 22 --    6462 : 2    1 AND2_X1  A =   1.06  Df =1411.5 -897.1 ps  S =   5.2 ps  Cin =  0.9 ff  Cout =   0.0 ff  Cmax =  60.6 ff  G =    1  
ABC: Start-point = pi4011 ($abcloop$59966).  End-point = po125 (\IF_PC_r [63]).
ABC: + write_blif <abc-temp-dir>/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:       69
ABC RESULTS:           AND3_X1 cells:        3
ABC RESULTS:           AND4_X1 cells:        1
ABC RESULTS:           AND4_X4 cells:        1
ABC RESULTS:          AOI21_X1 cells:       12
ABC RESULTS:            BUF_X1 cells:        2
ABC RESULTS:         CLKBUF_X1 cells:      199
ABC RESULTS:            INV_X1 cells:     1884
ABC RESULTS:          NAND2_X1 cells:        8
ABC RESULTS:          NAND3_X1 cells:        4
ABC RESULTS:          NAND4_X1 cells:        8
ABC RESULTS:          NAND4_X4 cells:        9
ABC RESULTS:           NOR2_X1 cells:       21
ABC RESULTS:           NOR4_X1 cells:        2
ABC RESULTS:           NOR4_X4 cells:        9
ABC RESULTS:          XNOR2_X1 cells:       30
ABC RESULTS:           XOR2_X1 cells:       19
ABC RESULTS:        internal signals:    16817
ABC RESULTS:           input signals:     4065
ABC RESULTS:          output signals:     2177
Removing temp directory.

Warnings: 2 unique messages, 4 total
End of script. Logfile hash: 2e19d9a6de
CPU: user 10.79s system 0.11s, MEM: 83.90 MB total, 75.64 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 15x opt_merge (2 sec), 17% 18x opt_clean (1 sec), ...
